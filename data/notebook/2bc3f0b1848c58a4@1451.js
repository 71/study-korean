import define1 from "./c5f2020df8eb4ee3@90.js";
import define2 from "./92c1d80f07680c57@78.js";
import define3 from "./f5cd18ac9ae173ef@69.js";

function _1(md){return(
md`# Korean words

Attempting to find the most common Korean words and their definitions to make a language learning dataset.

## Most common words

- A table of the 5,888 most commonly used words is available [on Wiktionary](https://ko.wiktionary.org/wiki/%EB%B6%80%EB%A1%9D:%EC%9E%90%EC%A3%BC_%EC%93%B0%EC%9D%B4%EB%8A%94_%ED%95%9C%EA%B5%AD%EC%96%B4_%EB%82%B1%EB%A7%90_5800),  though it's quite old (December 2004).
- Its source appears to be [한국어 학습용 어휘 목록](https://www.korean.go.kr/front/etcData/etcDataView.do?mn_id=46&etc_seq=71),
  last updated in March 2015.
- This table was downloaded and then dumped as text below; duplicates have been removed, and the array is sorted from most commonly used to least commonly used.`
)}

function _mostCommonWords(){return(
[...new Set(`
것01
하다01
있다01
있다01
되다01
수02
하다01
나03
그01
없다01
않다
사람
우리03
이05
그01
아니다
보다01
등05
때01
거01
보다01
같다
주다01
대하다02
가다01
년02
한01
말01
일01
이05
때문
말하다
위하다01
그러나
오다01
알다
씨07
그렇다
크다01
또
일07
사회07
많다
안02
좋다01
더01
받다01
그것
집01
나오다
따르다01
그리고
문제06
그런01
살다01
저03
못하다
생각하다
모르다
속01
만들다
데01
두01
앞
경우03
중04
어떤
잘02
그녀
먹다02
오다01
자신01
문화01
원01
생각01
어떻다
명03
통하다
그러다
소리01
다시01
다른
이런01
여자02
개10
정도11
뒤01
듣다01
다03
좀02
들다01
싶다
보이다01
가지다
함께
아이01
지나다
많이
시간04
너01
주다01
인간01
사실04
나다01
이렇다
어머니01
눈01
뭐
점10
의하다01
시대02
다음01
이러하다
누구
전08
곳01
여러
안01
하나
세계02
버리다01
위01
운동02
퍼센트
학교
자기04
가장01
대통령
가지04
들다04
시작하다01
바로02
어느01
그래서
무엇
정부08
모든
번04
그거
돈01
국가01
그런데
날01
여기01
모두01
여성01
친구02
마음01
후08
가다01
놓다01
관계05
아버지
남자02
어디01
몸01
얼굴01
들어가다01
왜02
나타나다
말다03
지역03
다르다01
모습01
물01
만나다
내다02
보이다02
쓰다01
이것
없이
이번01
길01
생활
쓰다03
지금03
뿐01
사이01
방법
새롭다
우리나라
내다02
앉다
처음
손01
몇
그때
과정03
삶
갖다01
찾다
특히
시10
이상05
지금03
나가다
이야기
교육
사다
경제04
아직01
잡다01
같이
선생님
예술
서다01
못04
역사04
읽다
이제01
결과02
내용02
물론01
동안01
책01
일어나다
당신02
시장04
넣다
중요하다02
무슨
느끼다02
어렵다
힘01
너무01
나라01
부르다01
의미02
자리01
밝히다
죽다01
이미01
쪽05
정치03
국민
생명
얘기
학생
연구03
엄마
이름
하나
내리다01
사건01
및
쉽다
짓다01
또한
이유04
또는
필요하다
글
생기다
사용하다03
남편01
들어오다
밖
세상01
작다01
타다02
대학01
작품01
상황02
가운데
보내다
두다01
즉01
따라서
상태01
이후02
당시02
문학01
더욱
아주01
지방05
밤01
높다
최근
채09
현실02
환경02
컴퓨터
먼저
다니다
얼마나
자체02
열다02
머리01
묻다03
남다01
부분01
기업01
거기01
변화
아들
뜻
아02
기다리다
떨어지다
선거04
관하다02
분08
그냥
나누다
이용하다01
거의01
곧01
중심01
활동02
오늘
서로01
관심01
역시01
이거01
애02
광고02
나다01
방07
정신12
이르다01
땅01
이루다01
아침
웃다
현상04
두다01
떠나다
기술01
전체01
그래01
얻다01
아름답다
끝01
민족
간10
조사30
듯01
입
뭐
그대로
영화01
필요
줄04
하늘01
년대
과학
듯하다
자연01
정말01
구조08
결국
밥01
입다01
오히려
프로그램
네03
이루어지다
남01
하루01
그림01
적03
터02
마시다
치다02
혼자01
나가다
이제01
교수06
술01
사랑01
의식03
전화07
끝나다
돌아오다
맞다01
아빠
걸리다01
지키다01
한번
커피
가슴01
길다02
바라보다
알아보다
회사04
맛01
대부분
산업
매우01
오르다
음식
표정03
꼭03
일부02
요즘
계획01
느낌
얼마
고개01
성격02
계속04
세기03
세우다01
아내01
가족01
현재02
세01
놓다01
발전01
차06
놀다01
향하다
관련
형태
각01
도시03
작업01
분위기
그러하다
자기04
나이01
우선02
믿다
바꾸다
낳다01
바03
정보06
열리다02
좋아하다
그리다02
만큼
배우다01
시13
역할
옆
행동
어02
국내02
비하다
기관11
입장04
만하다
예08
아래01
방식01
영향04
그럼01
나서다
흐르다01
저04
깊다
배02
내09
모양02
산01
새06
하지만
조건02
문05
꽃01
단계03
올리다01
그동안
교사09
갑자기
넘다01
지니다
바람01
잘하다
마을01
어리다03
대표
가능성
방향01
대회02
목소리
노래01
바다
힘들다
공부01
움직이다
의원05
노력01
못하다
전혀01
언니
단체02
분01
알려지다
가능하다
능력02
주장하다01
자식01
돌리다04
불01
주민
모으다
자료03
존재
학년
신문10
가지다
이해하다02
제품02
분야
선생01
돌아가다
사업04
행위
수준
지난해
표현
기분01
대06
젊다
동시02
옷01
기능03
순간03
전쟁
전08
꿈01
할머니
회의04
방송01
이야기하다
나무01
자다01
연극
오늘
마찬가지
걷다02
노동03
이때
과거03
가치06
시간04
집단
현대01
살펴보다
장관02
차이
풀다
시절01
물건
직접
개인02
근데01
발01
작가01
효과01
불교
끌다
대로01
빨리
시작되다01
둘01
말다03
설명하다
우주02
시기05
마치03
살04
생산
바라다01
강하다02
경험
음악01
최고02
나타내다
아프다
적다02
비01
고향02
놀라다
다양하다01
울다01
농민
드러나다
은행02
지내다01
결혼
동생01
법01
소설03
예06
오후02
질서03
담다01
모이다01
시민
회장07
빠르다
스스로
아기01
아저씨
옛날
이날
제대로
달05
던지다
참01
공간05
이곳
딸01
마지막
벌이다
병원02
자세02
강조하다
경찰04
맡다01
저녁
한편
그러면
기자05
넓다
시험03
잠01
주로01
훨씬
면05
통일02
들어서다
건강03
가깝다
건물03
시설03
외국02
밑01
어른01
주변04
대신03
원인02
팔다
차례01
군05
열심히
일하다
재산
조금01
팀01
부모01
약간
언어01
요구하다
올라가다
첫
감독02
그날
사실04
자주01
당하다01
삼다02
약03
기간07
담배
일으키다
일단01
할아버지
조직
태어나다
공장02
벌써
즐기다01
지02
환자03
변하다
사고12
그래도
아무리
맞추다01
쌀
일반02
재미있다
가르치다01
대화06
막다01
올해
형01
달리01
버리다01
붙이다
인물
늘
모두01
전국03
마치다02
전07
다만01
도움
가정06
걸다02
빠지다02
멀다02
버스02
오늘날
잠시
농업
대다01
식04
의견01
무대06
사진07
주장03
표현하다
인하다01
이상하다
제일04
붙다
아마01
얘기하다
잇다01
조금01
경기11
목적03
태도03
남성01
주위02
대책03
그만02
발생하다
다리01
아무01
어쩌다01
재료01
각각01
결코
옮기다
항상
해01
잃다
자유03
책임
바뀌다
비슷하다02
심하다
경쟁
달러
사랑하다
아니02
여름01
자라다01
회08
구체적
기회03
실시하다03
지구04
번째
소비자
싫다01
규모
기준03
말11
반드시
셈01
갖추다
그러니까
받아들이다
값
현장03
건설
꺼내다
노동자
동네
언제나
완전히
자동차
전하다
존재하다
개월
맞다02
별로01
어린이01
정하다03
한마디
유지하다02
이데올로기
공부하다
대중02
늘어나다
닦다01
만01
말씀
괜찮다
눈물01
각종
빛
아니01
피하다
거치다01
나아가다
야04
지식02
현재02
여전히
주인01
발견하다01
선14
인류01
특징
드리다01
선수05
형식01
마련하다
반07
발표하다
주제04
걸치다
겪다
관점02
귀01
기본
미터02
사라지다
어떠하다
감정06
기억02
놈01
인기01
배01
아파트
가끔
구성07
술06
실제로
짧다
고맙다01
관리04
그곳
달다05
보다02
비롯하다
과연01
들리다03
달리다04
바쁘다
이전03
인정하다
자18
중앙01
나쁘다01
불구하다02
시키다01
게임
국제02
그룹01
인생01
전통06
기르다
잔03
조사하다12
커다랗다
있다01
시인10
언제01
외04
평가03
내려오다
위치01
줄이다
가격03
달라지다
비다01
삼국
손님
원하다02
통신01
확인하다
모임01
수26
아무01
웃음
기계07
모양02
물질02
아나운서
뉴스
살아가다
펴다
배09
수업04
겨울
종교
층02
자연스럽다
장22
돌다
식사03
안다01
이해06
잊다01
제시하다01
반11
불과하다
혹은
엄청나다
편04
텔레비전
파악하다
편09
실천01
노력하다01
보호01
씻다
한편
늦다
이웃
편지02
공동02
까닭
방안01
센티미터
팔01
분명하다01
분석02
소녀02
지나가다
차03
상품03
설명
훌륭하다
관계자
새로
세13
이어지다
티브이
봄01
종류02
낮다
어깨01
지적하다
부부03
오래02
요구03
키우다
눕다01
발달하다
발전하다01
여행02
죽음01
고통
등장하다01
공01
듯이01
어울리다
오월01
쉬다03
알리다
차다01
과10
멀리01
빼다01
예정02
오빠
즐겁다
한계
흔히
바탕01
사월02
싸우다
언제01
예쁘다
갈등
느껴지다
의지06
전문08
정확하다01
초기04
나중01
등01
맛있다
며칠
신경04
찾아오다
미14
사용04
시선03
아무런
언론
투자02
지원02
결정하다01
경영02
목표
성장01
숲01
없어지다
작년
내려가다
떠오르다
미치다02
새벽01
쓰레기
얼른02
임금03
피해01
한06
무섭다
직장05
참다
크기
고기01
남기다
서양
주요01
지나치다
가져오다
냄새
부드럽다
여기다
이04
공연02
남녀
내놓다
떼다01
만들어지다
속도01
심각하다02
준비
계속되다02
구월02
맑다01
소년01
소식04
유월01
작용01
허리01
골14
공업01
그중
노인01
벌다02
살리다
새03
영어02
출신
결정01
경향02
기록02
나름
대답하다
반면02
썰다01
움직임
이미지
터지다
특성01
교장03
벗다
업무02
입시04
준비하다
청소년
돕다
응01
이기다01
찾아보다
취하다01
다루다01
달05
사장15
삼월
그렇지만
선배
업체
키01
구하다01
국회
그러므로
포함하다02
걱정
결혼하다
만약
바르다03
세월02
숨01
행사01
깨닫다
누나01
신09
왕04
점점01
질문
특별
판단
해결하다
거리08
계속하다03
그치다
근처
너무나
높이다
부정02
사정07
도대체
막02
부모님
수출03
계시다
그02
자르다01
데리다
마리01
무척01
비용03
비행기
옳다01
원래01
처리02
최초
꼴01
놀이01
뜨겁다
뿌리
수입02
초03
그리하여
낮
일찍
직원03
찍다02
가볍다
내부04
다소01
상대04
오전02
피부02
가게
가득01
그저
도05
벽06
장군04
무역02
부담01
약속
인사02
줄01
쳐다보다
충분히
대15
신체02
에너지
위원01
정리하다
집안01
배경01
죽이다01
단순하다
반대03
법칙
빠지다01
소금01
오염
자전거
참여하다
탓
푸르다
걔
그래03
목01
발표01
범죄
위05
흔들다
기초06
논리
드라마
뽑다
피우다01
감각02
미리01
부족하다
인사03
저희01
진행되다
교통01
기구15
법01
오랜
젊은이
후보04
거리01
과제04
근거
기록하다
다가오다
불다01
시각04
이끌다
종합
한글01
가을01
개발하다
내일
떨다01
매일
손가락
수단01
자04
자유롭다
적극적
판매
형성01
기울이다
길이01
장면04
점차02
톤01
관련되다
급04
나머지
날씨01
더불다
동물
의사12
개방04
건강하다02
미래02
앞서
여러분
왜냐하면
인구01
기대하다
네02
도착하다01
병04
소프트웨어
흘리다
반응
주인공
당연하다01
따뜻하다
따로
비판01
빌리다
세대02
축구04
형님
놓이다
당장02
무렵
밝다
사물10
일반적
장소05
곱다02
바닥01
새끼02
생각되다
서비스
선택하다
심다01
적다01
코01
간단하다02
고등학교
공개02
교실
스스로
견디다
기사10
막히다
매체
별01
복잡하다
뿌리다
영역03
체험
구속02
때로
어쩌면
극복하다01
불법01
비밀
색03
쓰이다03
일정하다
다지다
밝혀지다
아까
알맞다
이념
희다
가리키다01
모시다
발달
수많다
잘못
치르다
평화02
공사02
돌02
똑같다
박사01
성07
전문가
단지04
말씀하다
무용03
불리다04
싸움
자꾸01
차리다
해외
그리02
뜨다01
문화재
미소05
보통
식당
의미하다02
이래03
체육
구성되다
독특하다
땀01
사례05
소개하다01
잘되다
추진하다02
칠월
틀01
평균
훈련
흐름
십이월
쌓이다
이익02
쥐다01
컵
게다가
끓이다01
논문
멈추다
사용되다
오랫동안
위기01
정당07
종이01
찾아가다
폭력
혹시01
늘다01
양20
절차02
진짜
계시다
공기06
닿다01
물론01
속하다02
올림픽
이외01
재미01
제공하다02
증가하다01
기대03
떡01
식물02
옛01
외치다01
적어도
편하다
평02
권리
끝내다
대답
시작01
어려움
일주일
자원04
춤01
넘기다
드리다01
물체
분명히
시위04
아무것
온01
젖다01
제외하다
최대
평소
견해02
깨끗하다
농사01
더구나01
안정01
어둠
어둡다
어쨌든
주택
고장01
관련하다
눈길01
물어보다
미안하다
밀다01
스트레스
음01
인사01
주어지다
고려하다01
과일01
널리
농촌
올라오다
챙기다
고르다01
바르다01
벌어지다02
소재05
전망03
포기하다01
형성되다
고치다01
그림자
눈04
다하다
마침내
비교하다
시월01
커지다
한쪽
검사03
결론02
들이다02
맡기다
박물관
소문02
싣다01
쌓다
어서01
자녀01
제목02
짓01
판결
팔월
하얗다
희망
가방01
군대03
그만큼
무어01
비로소
상대방02
서구02
소유03
시골
실수01
잘못되다
치료
폭06
호14
내밀다
맞다03
부문06
시리즈
임신02
잡히다02
해01
규정04
그램
밭01
분석하다02
식구01
아예
어찌
울리다01
작용하다01
확실하다
개선01
그릇01
글자
바람직하다
연구하다02
착하다
개03
라디오
마련
부동산
신화04
양25
점10
직업
거두다
방학
범위
조상07
철학
검다02
곁01
근본적
너희
대형04
따다01
문제점
본격적
불가능하다
인제01
충격02
퍼지다
금방01
남쪽
누르다01
미술
백성
상당히
색깔
요리05
유명하다01
자네01
기13
꽤01
서로01
외국인
한참
군사04
끊다
넘어가다01
담기다01
마당
부인01
서두르다
지적05
짝01
참으로
충분하다01
기쁘다
뛰다02
숙제03
앞두다
예산02
온갖
우려01
우산01
기쁨
깊이02
꾸미다
늘리다
무릎
발견되다
보호하다
시스템
이용01
지난달
지르다03
참여
걸음
겨우
마르다01
비교적
애쓰다
올바르다
책상01
춥다
흔하다
높아지다
늙다
단위02
둘째
뛰어나다
무겁다
바람01
상상07
소득
수도09
역06
인식하다
자14
침대02
권01
뜨다05
맺다
수요06
스타
시계01
입술
잎01
중간01
지도자
천천히
구성하다
대체로
때리다01
몹시
문득01
스포츠
위원장
저기01
특별하다
효과적
가까이
낫다02
넘어서다
볶다
생산하다
언젠가
예술가
의도02
저지르다
줄어들다
가만히
건04
교회02
대개03
외부02
한두
한때
화06
흙01
가난하다
고객04
과학자
관광02
살아오다
상대적
수술05
식품01
연기10
일월01
조13
첫째
회원
도서관
들려오다
조금씩
조미료
풀리다
강력하다
들여다보다
마늘
선물03
습관
아주머니
위험
지하
활용하다
가꾸다
고민
떠올리다
맨01
법률
상처02
좁다01
지하철
집다01
현04
화면05
군04
대표적
만일01
사회적
생겨나다
이어01
주부03
진리
태양02
틀림없다
프로03
피다01
공급02
도로07
동료
잘못
지다05
채우다03
균형
기본적
부족05
사무실
이월01
일요일
접근
지켜보다
개성03
달리다01
더하다
띄다01
무너지다
보통
쓰다02
이러다
일어서다
죄03
참01
총장01
핵심
후반01
단순히
달려가다
방문03
불만
불편하다01
실제02
종09
피02
강01
관객
동작03
뜻하다
막01
밀리미터
비싸다
숫자
열07
왼쪽
중세02
택시
통합
계산01
꼬리01
놀랍다
양식04
예전01
저05
전기15
주식03
틀리다01
끊임없이
모델
붓다02
상식06
상표02
시원하다
아니하다
어디01
의식하다02
고모01
궁금하다01
둘러싸다
딱03
뛰다01
민주화
보도04
살피다01
않다
약하다01
잘못하다
잡지
거부하다
공무원
그만두다
댁01
반갑다
부족01
실시03
운명01
재정05
차라리
학자01
다녀오다
달다03
대규모
동09
민간
법원01
비디오
사실상
아끼다
이쪽02
지대07
판단하다
행복하다
굽다01
기름01
실천하다01
쏟아지다
연습03
오른쪽
용어02
익히다02
지도03
지위04
풍부하다
화장실
기억하다02
식량03
실험
용기02
토론01
핵
고급02
고생
미치다01
밟다
상당하다02
섞다
수석02
없애다
이뤄지다
적절하다
정상11
제사07
주말02
지혜02
참새01
화장품
굵다
깨끗이
낡다01
내년
농산물
눈앞
대학생
방문하다
붉다01
사고14
순서
아무래도
연구소
올02
위대하다01
이사14
지배하다01
틈01
가령05
거대하다
닫다02
드물다
들르다
매달리다
생일02
섬03
이하02
참석하다
토대
해결02
행복02
걸어가다
근로자
글쎄01
목숨
백화점
변화하다
병05
빠져나가다
안녕하다
여론02
의복01
체조02
출발하다
현실적
화제07
결정되다01
고양이
공격02
물가02
민주주의
불안01
소중하다
여유
의문02
중학교
킬로미터
파도
흰색
가수11
단09
방송국
빛나다
숨다01
실리다01
압력
예금01
예상되다
입학
증권01
직후
차량01
출산02
물다02
선진국
약07
어느새
재판06
저쪽
제자01
창문
초07
치즈
회복
구역04
대응02
반대하다01
발휘하다
소비05
심장02
아이고
조용히
중소기업
직접적
진실02
필자02
협력
가스
계층
구멍
담당
만화10
먹이다
무시하다
보도하다02
살짝01
생각나다
우유02
인상03
차갑다
철저하다
태아02
관찰하다
괜히
끼다03
날개01
녀석
눈빛01
단지08
두르다
드디어
물속
민주02
성공하다
소나무
여기저기
여인01
운영하다
평가하다
표04
필요성
감추다
머무르다
모15
부위04
비우다01
설치하다01
십일월
싸다01
아울러
지시02
형성하다
형제01
화려하다
거울01
덧붙이다
딴03
몇몇
무기05
세계적
안전03
양파
이상12
일종03
처지
촬영
타다01
틀다
형편01
가지01
감다01
고추01
규칙02
본질02
비치다01
빵01
서서히
스승01
신분02
실시되다
아마도
안방02
앓다
어제01
오직01
위험하다
자신02
잠시
졸업하다
증거
초점03
포함되다01
호랑이
강화하다02
공포08
권위
덜01
둥글다01
미루다
본래
부엌
세금01
실정04
영양05
육체03
입구02
잔뜩
적극
최소한
펼쳐지다
경험하다
그이01
넘치다
놓치다
대기07
독립
돌아보다
또다시
머릿속
북쪽
불안하다
쇠고기
위반03
주26
카드
평생
해당하다04
간부05
관념02
굉장히
단어
덮다
도와주다
도입
몰다01
배우01
비추다
신발
알01
앞서다
여건01
오래전
자격04
통제02
계단04
김치01
끄덕이다
낯설다
높이01
닮다
마음속
못지않다
반영하다
뼈
성장하다01
소속01
연결되다
장사01
제작02
제한01
차다02
추진02
취하다03
콩01
한숨02
헤어지다
구입하다03
날다01
너머
동기07
마련
살01
선장06
설탕
순수하다02
스타일
시점02
싸다05
의사02
집중02
코드02
큰일01
거짓말
대단하다
대단히
마주01
세계관
어제01
온통
의존하다
자세히
점심
정확히01
지치다01
청년
혀01
확대하다02
후춧가루
건설하다
경쟁력
마침02
신용01
연락02
온몸
정20
정신적
증상01
출연하다02
칼01
한꺼번에
강제01
건너다
깨다01
낚시
다가가다
뛰어들다
문자02
묻다01
비롯되다
슬프다
신부10
여겨지다
오징어
요금01
용돈
위주
음료
의자03
전자06
전해지다
전환03
지경02
진행02
카메라
통증
편리하다
하천02
현금04
화학01
활발하다
가리다03
거칠다
그나마
그야말로
껍질
남부01
명령01
몰래01
무조건
반장08
부근03
선택
역사가
연구자
연기자
워낙
정리09
조그맣다
줄기01
찾아내다
토요일
경찰관
권하다
극장
끝내
대문03
더욱이
별도01
비극
솜씨
시내03
신02
실내
쏟다
연결하다01
외교01
주머니
계약
과장07
극05
나란히
다방02
부끄럽다
성공01
수행하다02
신청01
실로01
아픔
알아듣다
약간
연기09
이동03
인연03
일행01
지도09
지식인
진지하다
치다10
호흡
흔들리다
근본
기온
날아가다
많아지다
바위01
버릇01
비판하다
빨갛다
세워지다
술집
쉬다04
오랜만
일부러
전체적
절반
접근하다
편안하다01
풍경01
확실히
흩어지다
갈다02
교류01
글쓰기
기후05
내내01
대기업
대응하다
도구10
매력
백05
보험
부럽다
부장07
섞이다
소03
심리01
심정01
쏘다01
아줌마
위치하다
이룩하다
이틀01
전달하다02
정말로
추다02
켜다01
코너
행동하다
형사02
희곡
감동02
공항02
군인
굳이
그늘
급하다
달걀
대중문화
마련되다
마루03
무게
물기
성적04
솔직히
시도하다03
아니요
예절
인상06
인터넷
적용하다
전통적
참가하다01
치마01
친척
특정하다
호텔
경계04
공식01
그다지
긴장
깎다
다리02
따라가다
머물다
명예01
뱃사람
부처04
숙이다
아가씨
온도
이마01
절대로
지붕
지원하다01
진짜
짙다02
창밖
청소06
침묵
텍스트
표면
햇살
객관적
걱정하다
경제적
구름01
구석01
끄다01
담당하다
둥지
벗기다02
부대08
불빛
서클
시청자
실체02
엄격하다02
완벽하다
완전하다01
절01
종업원
증가01
출연02
학기02
한동안
후기03
계절01
만지다
목사05
바늘
버티다
부15
분포하다02
비중01
수입01
아이디어
양쪽
예컨대
운동장
전개02
접촉
짐01
풀02
해마다
후배06
휴가01
경기05
계곡01
국회의원
다투다
도저히
뻗다
생활하다
솔직하다
안타깝다
앞장서다
요청하다
이르다03
일치하다
젓다01
정치권
처녀
축제01
터뜨리다
학습
개발되다
높이02
당연히01
대비하다04
동쪽
떨리다01
마구01
만남
미디어
복도04
수상09
쓰러지다
영상01
영혼02
운전사
자랑스럽다
잠깐
적당하다02
적용되다
주26
지속적
진행하다
차별
곳곳
구분06
금지04
내지01
달려오다
둘러보다
분노
비교01
소위06
스치다01
역사적
열차02
요즈음
유난히
의무01
잃어버리다
잠깐
잠들다
정식01
조용하다01
즉시
최선02
탑02
한복
활동하다01
건축01
귀엽다
답답하다
당황하다
동일하다
떨어뜨리다
똑같이
라면01
말05
밀가루
바깥
바지01
벌리다01
보고서
보관하다
부딪치다
빨래
상하다02
설치02
식용유
싫어하다
업종01
연출02
테이블
트이다
피곤하다
한국어
한자02
겁05
관리01
국제화
근육
깔리다01
사전13
산소03
석유01
소리치다
시06
신선하다03
안경03
약속하다
연합03
인격
장25
적13
조심하다02
질08
찌르다
책임자
총06
취미04
표02
품목01
확대되다02
거실02
논01
덥다01
둘째
바보
별02
보람
부작용
비난
신고01
야구02
어떡하다
예상02
위협
이03
이상09
잠기다02
주고받다
주먹
지지06
털다
경고04
공개하다
과목02
구경01
그분
근무
논쟁
달아나다
묶다
성명10
소스01
수십
신다
우리말
유교02
이불01
이성08
일상04
자동01
장래
전개되다
죄송하다
중요성
크다01
탤런트
특별히
품질03
회견
훔치다02
흔적
고전02
과학적
구분하다03
그럼02
뇌03
봉투02
분명01
사설04
승리
좌우01
주03
지다02
추억
하여튼
함부로
향기01
현지03
가늘다
개인적
겉01
굽히다
근무하다
깜짝02
넓히다
대11
떠들다01
매년
발생
셋
소주05
손바닥
승용차
어색하다02
얹다
의학02
장점02
적당히
줍다01
진출02
창조03
킬로그램
평범하다
프로04
홍보01
확인02
가루01
건지다
깨지다
내다보다
대량01
동행01
들01
떼01
마땅하다
바로잡다
박히다
방금01
생선
슬픔
아무렇다
이용되다
이튿날
임시02
제거하다
줄다
지구03
지우다01
참기름
통10
특수02
팬03
합치다
호기심
골목01
기운01
기획01
대충01
돌아서다
동화07
두껍다
맞서다
모자라다
박다01
본성02
상상하다03
생산력
셋째
안전하다
유학04
이르다02
장비07
정치인
정치적
졸업
처벌
카페
콤플렉스
검토
그다음
기법01
끓다
날아오다
농담01
닭
담임
도중04
두드러지다
맥주
모래01
살아남다
살인
성질
신호01
아버님
의심하다
인02
잇따르다
자랑하다01
자판01
적용
전기09
중반03
지시하다
출발
허용하다
가르침
각국
교과서
그려지다
꾸준히
년도
다수
덕분
돼지
두드리다
무리08
물음01
빌다01
수영02
스님
썩다
어머님
엉뚱하다
여보01
잊어버리다
정면01
조각05
태우다01
해석04
가리다02
개국01
계산하다
근원
기차01
담그다
마음대로
며느리
믿음
발견01
보고03
부탁하다
사용자
사회주의
설치되다01
수도권
식탁
실패하다01
영원하다
우연히
자극01
정해지다
직접
짚다01
총리01
칭찬
튼튼하다
햇빛
공원03
긍정적
논의하다
대출03
덕05
돌보다
뒤집다
먼지01
바닷가
바치다01
반하다03
발표되다
부정하다06
불러일으키다
사원04
소유자
씹다01
아무튼
안되다01
액수03
왠지
욕심
우승05
익다01
제출하다02
조심스럽다
직전02
짐작하다
택하다
터01
피시03
흘러나오다
가구03
간단히
강물
거꾸로
궁극적
극히
기여하다
꼭02
날짜01
대륙01
되게
뒤따르다
리듬
모니터
범인02
변동
불가피하다
삶다
샌드위치
서류02
손해
숨지다
아유01
요청
운06
일상생활
자존심
주저앉다
증권사
진하다01
초원04
최종
회복하다
흘러가다
흥미
검사02
그쪽
꾸다01
내려다보다
눈썹
대신하다
두렵다01
등장01
디자인
마디01
미처
비닐
비율02
생물01
소음06
양국01
얼핏
오래되다
웬01
조각01
중부03
차09
채소
침01
털
판매하다
항의01
해당05
확보01
환경오염
가치관
검은색
고생하다
기원전
기타01
긴급
꺾다
꿈꾸다
무려02
묻히다02
수표01
실태02
아쉽다
애정02
얘03
어머
여보세요
일정03
장르
저렇다
접하다01
정성11
제약01
쫓다
천03
추가02
테이프
품01
해석03
확인되다
가하다01
간장01
강의02
거01
고민하다
과04
교환01
국어01
노랗다
다치다01
동양03
동포02
뚫다
상02
새01
악기05
연말02
올려놓다
외면하다
원고03
정말01
줄곧
지출01
차08
치우다01
피로02
향03
개선하다01
계좌02
당기다01
도10
들다01
따르다02
말기05
말없이
망하다
문서
박수02
부자08
사흘
서쪽
성립되다
손자01
신랑02
실습
일찍이
자율
제법01
집중되다
창조적
천장02
파다01
하긴
해결되다
향상01
화가03
가라앉다
감싸다
고작02
구경하다
국물
기구14
깔다
다짐하다
대합실
말씀드리다
매장06
멀어지다
명칭02
불쌍하다
상업02
생산되다
숨기다
실력02
야채
엉덩이
울음
이달01
인체
저고리01
전부05
즐거움
지다03
진단02
질병02
짜다01
체력
친하다
헤아리다
각기02
경찰서
곧바로
관찰01
구두01
군사01
귀신01
귀하다
그토록
기초하다03
깊이01
나뭇가지
낫다01
답하다
대가06
더위
되찾다
말리다03
무덤
물결
밥상
보장하다01
사과05
사귀다
서너
솟다01
실패02
예상하다
예외
완전01
웃기다
유리10
절대적
제작하다02
쥐02
최대한
턱01
팔리다
품다01
하하01
형부01
휴식02
굳다
굳어지다
굶다
금년
기기13
까맣다
나침반
농부01
대학원
더럽다
도달하다01
뒤늦다
뒤지다02
등록01
디스크
맛보다01
무늬
문장02
묻다02
변호사
상23
상상력01
여학생
영업
예01
예방02
완성01
유리하다01
자연환경
증명하다
지적되다
지점03
철저히
코스
학부모
합리적
해석하다02
힘쓰다
거듭
귀국하다
기뻐하다
날리다02
내려놓다
냉장고
당근
덜다01
뛰어넘다
마누라01
맞이하다
불행하다
신고하다01
연속02
외롭다
욕02
원장07
유물04
저절로
절02
정비05
주의07
지난번
집어넣다
통계04
파일03
판01
피해자
필수적
학용품
화분01
환하다01
갈색
감기04
강남
구속되다
돌아다니다
등등01
멋지다
반발01
반찬
방지04
배다01
보장01
빠져나오다
새다01
소개되다
씨01
안쪽
억울하다
오가다
요구되다
음성02
이윽고
장식05
전개하다02
전날
전반적
척하다01
풍습01
한가운데
한정되다
해내다
흉내
감옥02
갚다
건전하다
결혼식
계산기
광장02
그렇지
깨다02
꽉
끼우다01
노래하다
다듬다
다름없다
당당하다
댐02
덩어리
두뇌
등04
모처럼
물리학
벌06
부정적
북부01
분리04
상당04
세다03
소개02
수화기
애인02
애초01
얇다
양념
에02
오염되다
오해02
웬일
의식04
의지하다
일기12
절대05
제한하다
존중하다
창고01
채10
책임지다
청춘01
초반01
트럭
파01
폭넓다
표현되다
학번
학원02
허가01
헤매다
가장07
곡02
곡식
꽂다
두려움
망설이다
무리01
버터
별다르다
보편적
부품
뻔하다02
뽑히다
상담01
서부01
속담
시중03
심사08
아이02
앞세우다
유사하다03
유치원
의욕
인근
일반인
작성하다
전공05
정기07
제의04
종일01
좋아지다
차림
창조하다
추위01
토마토
파랗다
펴내다
하드웨어
화장02
가져가다
감자01
강렬하다02
갖다01
괴롭다
교통사고
군데
내일
되풀이하다01
딱02
리02
메시지
면하다01
모색하다02
붙잡다
빛깔
뺨
사방03
살림01
실현
아냐
연예인
영원히
월급
유행02
이내03
이리04
제발01
차츰
투표01
파괴하다
하느님
해당되다
홀로
가까이
가득하다01
각자02
감히
강요하다
개미03
관습
광경
금세01
낮추다
내주다
명의02
물고기
물러나다
밀접하다
부탁
분량
불과01
뻔하다01
상자10
새해
소박하다01
수없이
승진03
양07
얼음01
열매01
적히다
점수06
제한되다
지속되다
쫓기다
쭉
통장02
평가되다
하도01
한창01
해안02
호박01
흑인
간08
갇히다
결심하다01
경기장
고장11
근로02
눈동자
늦다
닥치다01
도시락
뜯다
몸짓
부담하다01
부회장
빼앗다
삼키다
성실하다02
스튜디오
실제02
요새01
이상적01
일쑤
일체01
자꾸만
잦다03
절망02
접다01
제시되다
주방05
진출하다02
짜증
첫날
통과하다
투명하다02
확산되다
경력02
고통스럽다
곤란하다
공중03
공해01
귀찮다
기대다01
깨어나다
꼽히다01
대다수
듯싶다
먹이
무02
무료01
밉다
발레
상징하다
실현하다
아깝다
안정되다
어리석다
엎드리다
여럿
연설02
연필
염려01
우습다
운전02
익숙하다
일자05
잔치01
전달되다
전부05
차다04
치료하다
칸01
한05
갈수록
갖가지
거절하다01
관광객
구별하다
국01
다행
동의02
마무리
마주치다
막상01
몇
몸통
못01
묘사하다
미술관
베다02
보장되다
볼01
부분적
불고기
불리다07
불행
비명02
순수03
시각03
실질적
안개
여름철
오로지
완성하다01
이런저런
임무01
자연히
장난
저런01
전용04
지극히
청하다
확정02
가상05
각자02
간혹
개방하다03
관계되다
국산
그해
꺼지다01
꼭대기
끊어지다
도11
리그01
마이크
만족하다
메우다02
면적
목욕
반성01
벌떡
보상02
분리되다
빚
새기다01
서민
석10
선정하다03
세다02
소수08
쇼02
수학05
시어머니
시집01
연간02
영화제
예측하다
용도02
의심03
이동하다
자극하다
재빨리
적합하다
전화번호
조절하다02
조정09
중얼거리다
지급하다01
확장
힘차다
감사하다05
건조04
고요하다
그대
그립다
긋다01
기둥01
긴장하다
날카롭다
논하다
느리다01
도덕
동부05
뒷모습
똑똑하다
만06
만만하다01
못되다
보고하다02
사무소
사촌
상25
상인07
선언하다
소원04
수입하다02
식다01
엿보다
완성되다
유적08
일생01
입히다
잡아먹다
정보화
종종04
지갑03
차다03
창작
축소02
취향01
친절하다
카운터01
탄생하다
하숙집
학급
해군01
효율적
가슴속
간01
간판02
건드리다
관리하다
괴로움
근거하다
금액02
다행히
달래다01
동아리02
따라오다
말리다02
맘01
먹다02
명절01
못하다
바이올린
밝혀내다
부서지다
비행03
상관없다
성립하다
수명05
시즌
신기하다01
업다
예감03
음식물02
자신감
죄인
주의하다01
준비물
천01
출입
쾌감
탄생
튀다
하필02
활용
회색01
거액
고교04
고집하다
곧잘
골짜기01
교훈02
구르다01
글씨
노래방
단편01
달다05
대처하다02
매다01
머리카락
명확하다
발걸음
발길
벌레01
빼앗기다
생산자
선진03
성인01
소매01
시멘트
신규
신청하다01
실은
심판02
안기다02
양심02
이사장
이자05
익숙해지다
자세하다01
저거01
저축03
제비02
제안02
제안하다02
증세01
지난날
진급
콩나물
튀어나오다
표준01
항구03
허용
헬기
간신히
갈아입다
감다03
같이하다
거짓
거품
걸어오다01
공군02
기술자
나물01
년생80
달리기
대도시
도둑01
도전04
면04
모자08
보조02
불리하다
불편01
비비다
사과08
살아나다
소파06
속이다
수면07
수천07
스무
승부03
시기04
신념01
신입생
어린아이
어쩐지
여간
역14
연락하다02
영향력
예의06
이내05
이리저리02
인간적
인사하다
임금01
잘나다
재능
지불하다01
파출소
판08
한문03
건네주다
결승01
공공02
교양02
국왕
규칙적
극복01
글쎄요
내려지다
냉동
녹다01
대개03
배추01
센터02
수염04
수집하다02
승객
싱싱하다
아아01
어리다01
여권02
열쇠
오렌지
외모02
인공01
잠자리01
장남03
저마다
전국적
전반03
제자리
지루하다01
척08
포도주
학술
혈액
화살01
화재01
가르다
각각01
간격02
고함01
공격하다
그놈
기록되다
끝없다
끼어들다
노선01
답03
대사17
도망치다
독서03
동15
동의하다01
딱딱하다01
땅속
벌금
복13
봉사03
부서12
성08
소형03
신인07
악몽
안내01
앞뒤
언덕
열정02
오페라
입맛
재즈
적응하다02
절대05
접시
제공04
지나치다
참가01
체중01
추석01
충돌
통로
포장01
해소03
행해지다
현관01
현대인
혜택
호수07
확02
건너가다
골고루
구석구석
그제서야
껌
녹색
다03
등록증
막내
반복되다
발전02
방해01
번호02
벼01
본인
상점
수백04
실장
쓸쓸하다
악수06
애01
어지럽다
어찌하다
예정되다
이중03
인원
인정받다
인터뷰
입학하다
자랑01
저것
정문03
착각03
창09
친정04
켜지다
타입02
팩03
표시하다01
행하다
활짝
감상하다04
개별
공식적
그런대로
기독교
깨달음
끼다02
넘어지다
눈부시다
단점01
들려주다
뚜껑
마음먹다
목록
반복하다01
반성하다01
별명01
보전03
불어오다
소유하다01
수박01
스위치
신세02
아까
알아내다
암08
야단01
얘02
엔01
연결01
연관06
용서하다
우정02
육군02
음식점
의논하다
인분80
주요하다
죽07
차마
참조02
첫째
타고나다
태우다02
행사02
향수04
허용되다
가입
가정07
과자02
교체01
김03
꼬마
끝없이
나르다01
놀리다01
늘어놓다
닫히다
대표하다
대학교
도로01
돼지고기
두려워하다
뜻밖
막걸리
맡다02
미스03
밀리다01
밥그릇
방문02
병들다
부러지다
불꽃01
상대성
설문01
소설가
쓸다02
안녕히
안팎
예방하다01
올02
유의하다02
유학06
이해되다
인하01
작성01
잘리다01
전달03
전시회
전화하다02
전환하다02
정치학
좌석
주문04
집안일
체계적
출근
크림
탁월하다
텅01
토하다
푹01
한순간
가사09
가입자
감소하다
개구리
결과적
괴롭히다
구별02
깨우다01
끈01
끊기다
끊임없다
넉넉하다
동전05
두어
마약
밑바닥
보도되다
보리01
본부03
부17
성숙하다
소극적
소용07
손질하다
수건
순식간
시도07
시집03
아무개
약점01
양복01
어째서
어쩌다02
얼다01
여07
연령01
예비02
울음소리
이놈01
이력서
인정되다
잠자다
젓가락
주년02
중단하다
중대하다01
중심지
집중적
참되다
초청01
출판사
탁자01
토끼
퍽02
풍속01
피아노01
핑계
한층
행운02
가로막다
간섭
갈증
갑작스럽다
교환하다01
그래야
기원05
길가
난리02
남매
내버리다
달리하다01
뛰어가다
미사일
발가락
보존
보호되다
뵙다
부치다02
상관03
설명되다
섭섭하다01
세07
세련되다
손쉽다
안주04
어린애
열기07
옷차림
위로하다
이같이
인형01
일치01
재생01
전철04
찢어지다
철학자
축하하다
컬러01
통화04
특이하다
필연적
하룻밤
흘러내리다
가짜
강도05
곰03
급히
기념02
나아지다
넘어오다
되돌리다
띄우다02
매너
민속01
버려지다
빗물
사위01
설날
설득하다
손질
손톱01
식빵
아르바이트
외로움
외우다01
운전자
유리창01
입대01
적성05
전망하다02
집단적
차이점
찬물01
철도
총각01
캠페인
태풍
한눈01
햇볕
홍수02
가뭄
간접
강력히
개선되다01
건네다
게01
결심01
곧장
교직04
구속하다01
귀중하다01
긁다
금지하다
기사02
기숙사
나뭇잎
내쉬다
넓어지다
늘어지다
단독02
마당
마음껏
몰려들다
미팅
바04
바퀴01
발자국
뱉다
벌어지다01
보너스
산책
생기01
서적02
소화06
수험생
시끄럽다
신세대
안기다01
어기다01
어때
엘리베이터
연구원01
연애05
연휴02
요약하다02
운동하다
월요일
위성06
의외로
이모02
자살01
제시02
제외되다
조카
주소01
찍히다02
철06
취직
타락02
통화03
틀림없이
파티
회관
계획하다01
공연장
국적02
근래
나뉘다
낱말02
내외02
냄비
늑대
늘어서다
다정하다
달다07
달려들다
망원경
모범02
무리하다
묶이다
방해하다
뱀
벌02
뵈다01
상류
석02
선명하다02
선호하다01
성공적
소규모
수시로
시야03
실현되다
아니야
어느덧
오르내리다
왕자01
우수하다02
유명01
유형07
으레01
일상적
일일이02
전공하다01
전후01
정상02
정상적
질적
척01
철01
청소하다03
충격적
치아02
판01
편의02
폐지02
해설03
헌
흑백
희생
가까워지다
감사하다05
강도06
경비02
경제력
금하다02
기대되다
깊숙이
꿀
넘어뜨리다
농사짓다
단단하다
담당자
답변
대비10
대체02
더욱더
도심04
된장
둘러싸이다
등산
마찰
마크
만족01
망치다
메뉴
모금01
묘사02
문화적
묻히다01
미혼01
발전되다
방송사
방지하다01
사표07
삼가다
생방송
셋째
소홀히
손발
쌍둥이
안내하다
앉히다
영하
옆구리
외교관
외국어
웬만하다
유행하다01
으응
이어서
자장면
자정01
종합하다
중학생
짜다02
참03
채08
최후
취재02
치다05
테러
토론회
한잔
호주머니
휴일
가난01
가죽01
관계없이
군06
기다01
다툼
달력
대01
대낮
데려가다
도자기
돌멩이
되돌아오다
두께01
뒤쪽01
모조리01
변경04
부지런히
사슴01
삼촌
상당수
소풍02
속옷
손목
손실
슬쩍
시나리오
신문지
실컷
양보하다
엔진
용09
운행02
이대로
인간성
인상적
자라나다
전시04
조그마하다
주차장
주한02
중년01
지다04
찌꺼기
춤추다
테니스
파리01
포스터01
포함02
형식적
호남02
후회하다
가이드
가입하다
감소01
고르다03
고속도로
공책01
구분되다
구입03
기여04
기호01
꾸리다01
낭비
내외01
대략
덮이다
도리어
똑바로
라인01
렌즈
멋있다
멸치
바람02
발목01
밤늦다
방울01
배03
벌03
보관01
보살피다
보완하다
보존하다
빨다01
빼놓다
사상01
사춘기
상반기
서점03
선전03
설립하다
수집02
수필04
신기하다04
신비02
신설03
실감
실망02
쓰다듬다
알루미늄
알아주다
양말01
여우01
와02
외출
용기03
웨이터
유발하다
유지되다
자가용
잡아당기다
점검
정말01
정원06
조기05
존경하다
종13
종소리
중순
지각04
직선01
참외01
체하다01
체험하다
초대하다02
총03
칭찬하다
코치
통일하다
패션01
프린터
피디
하나하나
학위
회의05
가로등
감12
개개인
걷다03
고집02
금06
급격히
기능01
기막히다
나누어지다
낙엽
넘겨주다
논리적01
다가서다
대기하다04
대접05
동창01
두리번거리다
말다01
맞은편
멋01
면07
박10
밤하늘
변명01
보자기02
부상05
분리하다03
붙들다
사들이다
상관없이
새우02
선원06
설사02
실망하다02
심해지다
씨름
아쉬움
앞길01
약해지다
어젯밤
엉망
여관03
여쭈다
연습하다03
연출하다
열중하다
영웅
오02
유산07
의도적
이따금
임신부
장기적
재주01
전설04
절08
젖
조르다02
주문하다01
주사13
지겹다
짐작
쫓겨나다
찢다
채널
출근하다
취소하다01
취업
칠하다
타오르다
탁01
판10
평03
평화롭다
표시01
표시02
하반기
한구석
한하다02
해답
해소하다01
허락하다
확립하다
확신하다
흥분
흥분하다
힘겹다
감수성02
거들다01
건너편
경치02
급속히
급증하다
깔끔하다
꼼꼼하다
낮아지다
단순02
대사04
두세
때02
매01
먹고살다
멎다01
면담
모집
모퉁이
바구니
바싹01
발달되다
발음01
방울02
보름01
봉지06
부딪히다
비상01
비서05
뿌리치다
사업자
상대편
세트
소망03
수동적02
술잔
슬그머니
시장03
시청률
신문사
여군02
연인06
연장05
열흘
예선02
옥수수
원12
은행나무
이웃집
자부심
장차02
재미없다
저편
정신과
제도적
조절02
주거02
주스
준비되다
중단되다
중요시하다
지점01
진단하다
콜라
타다04
편견
플라스틱
환율
활기02
강사04
강수량
교대01
구청02
국내외
금지되다
기도하다02
기성08
깨뜨리다
꼼짝
남학생
농사일
농장05
데이트
되돌아가다
두부01
들이켜다01
따라다니다
라운드
마음가짐
머리칼
모15
바퀴01
번개01
변화되다
부러워하다
부재03
사망04
생02
서늘하다
성경03
소요되다
소화하다01
순간적
시집가다
시청01
싶어지다
씌우다01
야간
엇갈리다
엷다01
오락01
오른손
우아하다
이것저것
이슬
인간관계
장기간
저자05
전선10
정지06
제의하다
조명06
조화되다
줄거리01
중단04
차선03
착각하다
초상화
출장01
쿠데타
퇴근
특수성
항공기
활발히
회화05
흥미롭다
가져다주다
각오01
개방되다
겨자01
경고하다02
경제학
골프
관심사
구별되다
국사03
굳히다
귀국02
그간
그럴듯하다
극작가
기23
기울다
기적03
끌리다
내보내다
담01
동서04
들여놓다
따스하다
말투
명령어
목욕탕
미끄러지다
바닷물
변신01
부친
붙잡히다
브랜드
빨다02
사무05
사소하다01
상04
상쾌하다
성06
손길
순위
식사하다02
쌍02
썰렁하다
암시01
앞날
역사상02
연주06
우울하다
우체국
울리다02
육상02
음주
이별
인재02
인종01
일시적
재밌다
전문적
젊음
점잖다
조개01
주무시다
중계방송
중독01
지급01
진실하다
차창
초청하다
출발점
출판02
출현하다
클럽
키스
탈출하다02
판사01
허락
확신01
흐리다02
걱정스럽다
건설되다
고개02
고프다
그제야
금연01
기성세대
기술하다01
까치01
꿈속
나비03
남북
납득하다
단06
대사관
독창적
되풀이되다
떠나가다
떠들썩하다02
뜻대로
레스토랑
로봇
만점
매달
모여들다
묵다01
바깥쪽
배고프다
버섯02
보수06
보안01
뵈다02
부15
비웃다
비키다
사나이
사모님
삼06
상징적
색다르다
세미나
세제04
속삭이다
시일04
시합01
신속하다02
신제품
신중하다
썩01
암컷
여행하다01
예고하다
위반하다02
윗몸
은은하다02
이해관계
익히다01
일대01
입력
자연현상
정류장
정신없이
정직하다01
조정하다06
주름01
중요02
챔피언
최신
축하
취소01
캐릭터
커튼
팬01
해롭다
현관문
활발해지다
회복되다
희생하다
가능해지다
겨울철
고추장
골프장
공연히02
과정04
국수01
국제적
그루01
그전
금고02
꾸중
끌어당기다
끼01
능동적
달빛
당분간
도움말
되살리다
뒷산
땜03
만족하다
맵다
메다02
몰려오다
물질적
미인01
믿어지다
반죽
반지02
밤02
배치03
백인01
본03
본사03
부르다02
불평등하다
비타민
빌딩
빠뜨리다
산속
새로이
서양인
소지품
송이01
쇠01
수컷
승리하다
식초
심부름
씨앗
야외
얻어먹다
엄숙하다
여가03
여동생
연상하다02
옆집
오래간만
오래도록
올려다보다
외다02
외침01
이빨
이해03
일손
잠바
잠수함02
장수01
장학금
재다02
쟤
점심시간
지도하다
지적01
진로02
진행자
쪽02
찾아다니다
책임감
체온
초밥
출구01
출입문
통과
포장마차
푸다01
풀01
피망
필름
한결
한여름
항공
호선80
회전04
휴지02
가려지다
가위01
고속02
곧다01
골치01
구하다03
그때그때
내달
넷째
놔두다
늦어지다
도망가다
독하다
땅콩
뜰01
뜻밖에
만02
명단01
무의미하다
문구01
뭣
미만01
백색01
비바람
사기01
사망하다01
사무직
소질03
솜
시디롬
식생활
신호등
신혼여행
실01
씩씩하다02
연구실
월드컵
유머
의류
입원01
잊혀지다
잘살다
장가01
적응02
정리되다
조15
졸업생
죽다01
창피하다
친절
침실
태권도
토론하다
하나하나
합하다
핸드백
햄버거
가정교사
감사08
공통적
교육자
교재01
기타02
길어지다
깨소금
나빠지다
남02
놓아두다
대접하다
두통
뛰어내리다
무궁화
바이러스
방바닥
번거롭다
사냥
사회생활
설거지
수년02
수출하다03
숙소02
슈퍼마켓
심리적
연기05
위로02
이용자
입력하다
자격증
진료
창가01
초조하다
타다03
한잔하다
함께하다
합격하다
화장지01
힘껏
가요02
감상05
공짜
공통되다
그만하다
김04
나들이01
녹이다
눈가
도망02
동기04
모기01
미니02
방면01
법적01
벤치
보수11
볼일
부끄러움
비누
비행02
빗줄기
사회학
성적01
세수04
순진하다01
스웨터
심심하다01
어려워지다
여행사
올라서다
왼손
유학생01
은04
자리02
잘생기다
장애인
재활용품
저러다
저리01
절약하다
정반대
조15
진동03
찌개01
추천03
학점
한가하다02
합격
환영하다
간접적
갈다01
경영하다01
그리움
그사이
기념하다
기도03
길거리
꽃잎
넥타이
대강02
독립하다
돌려주다
들이마시다02
뛰어오르다
라이터
매일
문밖
방송하다01
보충하다
불완전하다
불평01
붐비다
생활환경
서명03
손등01
역사학
영03
오리03
요리사
원02
원서05
월02
이론적
이제야
임신하다
입원하다01
자취01
잠그다01
잡수시다
장난감
장례02
전기밥솥
지금껏
지름길
지진02
참석자
창구01
최저01
코미디
튀기다01
필수02
하품01
한국말
횟수
흐리다01
가능
값싸다
계란
교문01
권투01
긴장감
김01
넷01
뒤편
매달다
매주01
문제되다
받침
북07
불이익
불필요하다
산부인과
새우다01
서명하다01
수02
수고하다01
수학03
신부04
쓸데없다
아뇨01
아래쪽
아스팔트
아하
알코올
액세서리
에어컨
염려하다01
오이01
외삼촌
요03
웃음소리
위쪽
음료수
인쇄
잔디
전세07
조깅
초대06
치다01
캠퍼스
터널
통12
퇴직금
환갑02
가만있다
간편하다
감동적
건너오다
관광지
교복01
교포02
귀가하다01
날아다니다
더더욱
등록금
뛰어다니다
마음씨
만07
메모
몇십
몸매
몸무게
무관심
반짝이다
배달02
번역
부인04
분주하다05
비닐봉지
비판적
뺏다
사전22
서랍
소나기01
소중히
손잡이
수도꼭지
실례01
싸구려
안녕
안되다02
약국02
어찌나
엉터리
연하다01
원숭이
위법01
육체적
음력02
이혼03
일회용
잔디밭
저기02
전문직
전화기
제출02
지난주
진달래
쪽03
찌다05
차남02
채점
침착하다02
캄캄하다
타자기
팬티
편히
포인트
포크01
한밤중
효도01
가구04
간호사
개나리01
고등학생
골목길
관람객
귀가03
그리워하다
기억나다
기침01
노랫소리
다섯
닭고기
대학교수
뒷문
딸아이
레몬
만족스럽다
미움
바가지01
발끝
배꼽
병실02
봉사하다01
비행장
사랑스럽다
숟가락
술병02
습기02
쓰이다01
엽서02
예보
요일
욕실
용감하다
운전기사
위험성
익다02
일05
장마01
재학02
저04
전기12
전시하다01
정기적
종교적
주관적
직장인
진심01
질문하다
짧아지다
찌다01
책가방
천국01
치약
큰절01
학과01
후회01
강조02
게시판
공통점
과외
교내01
구15
금요일
김밥
내적01
놀이터
다녀가다
답장
때때로
뜨다03
마라톤
매스컴
무08
묵다02
바나나
발등
밤새02
별일
보내오다
부채01
불법02
블라우스
사업가
사이좋다
세상에
수고01
수요일
슬퍼하다
시금치
신청서
쓰레기통
아랫사람
앞쪽
앨범
양05
여전하다
영남
옥상03
왼발
운전하다
위06
일기11
일자리
자매03
저번02
전시장
절약
정답
정오01
제대하다
졸다01
즉석
지방09
차차01
추측
충고
코피01
턱04
팩시밀리
한낮
할인01
가득히
간호
갑05
건너01
걷다04
겁나다02
고구마
국기07
금메달
노트02
눈감다
눈뜨다
대입01
대화하다02
도마01
동화책
딸기
땅바닥
모집하다
미워하다
밤색
밥맛
배우자02
복사09
볶음밥
성별01
세탁
소문나다
소용없다
속상하다02
손수건
송아지
수돗물
수만
수입되다02
수입품02
술자리
식기01
싼값
안04
안부01
양주04
어린이날
영화배우
오른발
용서01
우편04
이사하다01
일등
작아지다
정장04
좁히다01
좋아
죽03
줄무늬
지워지다
지저분하다
진통01
찬성하다
참석
초콜릿
최고급
최상02
최악
출국
친해지다
코끝
터미널
피자
한국적
햄04
환영02
가로수
간식02
감01
개다01
고급스럽다
고소하다01
공주01
깨어지다
남04
네거리
노란색
녹음하다
달러
대여섯
되돌아보다
등산로
마사지
만06
먹히다
몸살01
무더위
무용가
박스
반기다
밥솥
베개
벨트
복사하다03
붓다01
비19
사계절
사과하다02
사투리
상금04
수저01
식욕
앞바다
얄밉다
양상추
여대생
연기하다01
온라인
외갓집
외할머니
유능하다
유적지
음악가
응답하다
이롭다02
이분01
인삼
인상01
입사04
자01
재활용
점원01
제삿날
주름살
참고하다
찻잔
철학적
초대04
추천하다02
칫솔
큰길
판매되다
편05
포근하다
포도06
하나님
학력02
한정하다01
향상되다
홈페이지
횡단보도
가톨릭
강당
건조하다02
걷기
고모부
공중전화
공통
과거02
국가적
귓속
그래픽
근교
기초적
녹음03
다양성
대상자03
동그라미
떠나오다
레이저
마중01
밝다
밤중
배드민턴
배부르다
버튼
보수적
불확실하다
비만01
빗방울
사회자
샤워
서투르다
세탁기
손뼉
손수01
송편
시들다
시디01
신사16
신혼부부
싱겁다
쓸데없이
야하다01
어쩌다가
옛날이야기
오븐
온종일
와인
왕비
우승하다
운반02
웃어른
인사말
자판기
장모님
저녁때
저울01
적어지다
지폐
진실로
촛불
출퇴근
치과
테스트
통역
퇴근하다
표시하다02
피로하다02
하04
한데03
혼잣말
화나다
효도하다
힘없이
가로01
갈아타다
건넌방
곧이어
공기07
굉장하다
그래서
기업인
긴장되다
깨끗해지다
낚싯대
남동생
냇물
단골01
단맛
담요
대01
더러워지다
데우다01
도착01
동그랗다
뛰어나오다
레저
로터리
무덥다
뭘01
반대편
발바닥
발톱
밝아지다
밤새다
부잣집
분명해지다
사진기02
산길02
상추01
섭씨
소시지
쇼핑
수업03
스케줄
스키
시외01
심각해지다
싹02
씻기다01
안심하다
약01
약수04
약품
양배추
양보03
양옆
얕다
어두워지다
어쩜
엊그제
여고생
여왕
연기되다01
열03
예약
올라타다
운동화
이곳저곳
이다음
일회용품
읽히다01
잡수다
장사꾼
저런02
점심때
주일03
즐거워하다
집중하다02
짜다03
짜증스럽다
천재03
초등학교
초보01
초여름
초저녁
충돌하다
코트03
피곤
학비
해11
해외여행
효자01
감소되다
강변01
공연되다
공휴일
괴로워하다
교시03
그리로
까먹다
깜빡
깡패
꾸다02
낚시꾼
다양해지다
대중교통
데려오다
등록하다01
뛰놀다
뛰어오다
라켓
리터01
마요네즈
마흔
만세04
만화가
맘대로
머리말
면접
명함
몸속
무책임하다
반짝거리다
밤새우다
번지03
볼펜02
빨간색
사립04
사생활
사이사이
사자11
새소리
생활수준
서툴다
석사01
성당03
속마음
손잡다
숙녀
순하다02
시댁
시부모
신체적
실수하다
쓴맛
야옹01
얼마간
올여름
외제05
외출하다
욕하다
위아래
음반
의논
이09
이래서
이발소
자살하다01
자연적
장례식
재수03
재작년
재채기
전구10
전문점
전통문화
정거장
존댓말
주전자
지우다05
찬성01
초보자
초청장
촌스럽다
카레
컨디션
코스모스01
킬로
토론자
튼튼히
티셔츠
페인트02
평상시
학교생활
한둘
해물
형05
혼나다
가만
감정적01
강북
거리02
고무신
고춧가루
관람
교외01
교육비
국립
금02
기억되다
까다01
꽃씨
꾸준하다
난방02
내용물
녹화03
농구07
달다04
뒷골목
들어주다
디자이너
따로따로01
뛰어나가다
뛰어놀다
라이벌
매번
먹다01
무관심하다
무사하다04
밤낮
배구06
번역하다
병아리
부지런하다
부피
비기다01
생활용품
선풍기
세로01
섹시하다
소비하다
수리하다02
스물
식료품
식히다
싫어지다
씻기다02
얼리다03
여직원
열리다01
옆방
오피스텔
올가을
와이셔츠
원피스
윗사람
이민03
이성10
이혼하다
인제01
입사하다04
재우다01
전시되다
졸리다01
졸음01
종이컵
주문03
지능
쩔쩔매다
철02
청바지
추가되다
치료법
치우다01
코끼리
콘서트
큰소리01
큰아들
특급02
평일
풀어지다
한겨울
한평생01
해수욕장
핸드폰
허허01
호실01
휴지통
흐려지다
희망하다
힘들어하다
강의하다02
걱정되다
공연하다02
귤
내과01
넷째
된장찌개
목걸이01
무지개
문법01
볶음
볼링
비둘기
생활비
스키장
시대적
쓰다06
앞문
인도02
책방01
추가하다
칠판
크리스마스
탁구
현대적
구01
나흘
늦가을
다이어트
목요일
못생기다
영화관01
예술적
장모01
중국집
지우개
지하도
튀김01
고궁01
고속버스
단추01
대중적
뚱뚱하다
미역02
반말
분홍색
사11
소포01
손녀
수영장
아래층
일본어
작은아버지
잠옷
장갑01
초순01
퇴원하다
하순01
갈비01
기혼02
도장17
동물원
모레
삼계탕
생신02
서른
시내버스
아홉
예약하다
우표
장미05
천둥
퇴원01
파란색
게으르다
기념품
냉면
단풍01
독일어
떡볶이
문학적
미끄럽다
복숭아
비빔밥
여든
외아들
이따가
일흔
장인02
화요일
강아지
닷새
동서남북
선물하다
아이스크림
외할아버지
요리하다02
입국02
주차04
체육관
최소01
칠01
칼국수
큰아버지
홍차
국민적
국제선
다섯째
동양인
맛없다
백05
사십
안과02
연락처
연세02
예식장
월세
위층
인삼차
진찰02
초록색
축구공
큰딸
팔03
결석01
김치찌개
녹차01
독감01
만두01
발음하다01
보라색
복습하다
스케이트
실례하다
여섯
연두색
온돌
육02
일곱
출입국
클래식
팝송
팩스
국내선
떡국
복습
삼십
성함
세탁소
시외버스
야구장
오십
운동복
작은아들
잠자리02
주차하다01
중국어
청소기80
칠십
필통
학생증
형수01
공항버스
관광버스
그저께
냉방
눈병
다섯째
배추김치
사탕02
색연필
소아과
양력02
예순
오04
작은어머니
축구장
한글날
한식04
넉01
메일
복사기
빗01
설렁탕
십
아드님
천03
결석하다
기념일
까만색
내후년
따님
쉰
시아버지
식품점
약혼녀
어저께
영상03
예매하다01
예습
예습하다
육십
출석하다
큰어머니
팔십
멍멍01
분필03
약혼자01
양식03
억04
여덟
외과01
제과점
중식80
케첩
편의점
갈비탕
검정색
미용실
아흔
이십
일식04
작은딸
저곳
초등학생
하얀색
강원도
경기도
경복궁
경상도
경주
고구려
고려
광주
구십
그렇게
금강산
김포공항
깍두기
남대문
남대문시장
남미
남산
뉴욕
대구
대전
대학로
대한민국
덕수궁
도쿄(동경)
독일
동대문
동대문시장
러시아
런던
미국
백두산
백제
베이징(북경)
부산
북한
서울
서울역
설악산
세종대왕
신라
아시아
아프리카
안동
영국
울산
유럽
이렇게
인천
인천공항
일본
저렇게
전라도
전주
제주도
조선05
종로
중국
지리산
충청도
캐나다
파리
평양
프랑스
한강
한국
한라산
한반도
호주
단어`.split("\n").map((x) => x.replace(/\d+$/, "")).filter((x) => x.length > 0))]
)}

function _mostCommonWordsIndex(mostCommonWords){return(
new Map(mostCommonWords.map((word, i) => [word, i]))
)}

function _4(md){return(
md`## Definitions

- Words with their definitions, part-of-speech, and translations can be downloaded from
  [krdict.korean.go.kr](https://krdict.korean.go.kr/download/downloadPopup).
- This is a big file, so it can't be uploaded to Observable. Instead, you should download it
  and upload it below.`
)}

function _rawzipdict(Inputs){return(
Inputs.file({ label: "Dictionary archive", accept: ".zip", required: true })
)}

function _6(md){return(
md`### Conversion

Since we don't need a lot of the data, we trim it down and convert it to something interesting below.`
)}

async function _jsonDicts(rawzipdict)
{
  const archive = await rawzipdict.zip(),
        files = Object.fromEntries(
          await Promise.all(
            archive.filenames.map(async (x) => [x, await archive.file(x).json()]),
          ),
        );

  return files;
}


function _jsonEntries(jsonDicts){return(
Object.values(jsonDicts).flatMap((x) => x.LexicalResource.Lexicon.LexicalEntry)
)}

function _entries(jsonEntries,koPosToEnPosAndDescription){return(
jsonEntries.flatMap((x) => {
  const asArray = (x) => Array.isArray(x) ? x : x == null ? [] : [x];
  const get = (x, att) => asArray(x).flatMap(x => asArray(x.feat)).find((f) => f.att === att)?.val;
  const getAll = (x, key, f) => asArray(x[key]).map(f);
  const lexicalUnit = get(x, "lexicalUnit");

  // Ignore proverbs (관용구) and idioms (속담).
  if (lexicalUnit === "관용구" || lexicalUnit === "속담") return [];

  const text = get(x.Lemma, "writtenForm");
  let koPos = get(x, "partOfSpeech");

  if (koPos === undefined) return [];

  let
    vocabularyLevel = get(x, "vocabularyLevel");

  if (vocabularyLevel === "없음") {
    vocabularyLevel = undefined;
  }

  const
    semanticCategory = get(x, "semanticCategory"),
    subjectCategory = get(x, "subjectCategiory"),
    origin = get(x, "origin"),
    pronunciation = get(x.WordForm, "pronunciation"),
    soundUrl = get(x.WordForm, "sound"),
    relatedForms = getAll(x, "RelatedForm", (x) => {
      const
        type = get(x, "type"),
        text = get(x, "writtenForm");

      return { type, text };
    }).filter((x) => x.text != null),
    meanings = getAll(x, "Sense", (y) => {
      let
        originalForm = undefined;
      const
        synonyms = [],
        antonyms = [],
        related = [],
        abbreviations = [],
        originalForms = [],
        lightIsotopes = [],
        heavyIsotopes = [],
        honorifics = [],
        emphasizing = [];

      for (const rel of asArray(y.SenseRelation)) {
        const text = get(rel, "lemma");

        if (text == null) {
          continue;
        }

        switch (get(rel, "type")) {
          case "유의어":
            synonyms.push(text);
            break;
          case "반대말":
            antonyms.push(text);
            break;
          case "참고어":
            related.push(text);
            break;
          case "준말":
          case "낮춤말":  // Simplified form.
            abbreviations.push(text);
            break;
          case "본말":
          case "여린말":  // Soft variant.
            originalForms.push(text);
            break;
          case "큰말":
            heavyIsotopes.push(text);
            break;
          case "작은말":
            lightIsotopes.push(text);
            break;
          case "높임말":
            honorifics.push(text);
            break;
          case "센말":
            emphasizing.push(text);
            break;

          default:
            throw `unknown: ${get(rel, "type")} (-> ${text})`;
        }
      }

      const
        definition = get(y, "definition"),
        examples = getAll(y, "SenseExample", (x) => {
          const
            type = get(x, "type"),
            texts = getAll(x, "feat[att=example]", (x) => x.getAttribute("val"));

          return { type, texts };
        }),
        translations = asArray(y.Equivalent).flatMap((x) => {
          if (get(x, "language") !== "영어") return [];

          const
            text = get(x, "lemma"),
            definition = get(x, "definition");

          return { text, definition };
        });

      if (translations.length > 1) throw "more than one translation: " + JSON.stringify(translations)

      return {
        originalForms,
        abbreviations,
        synonyms,
        antonyms,
        related,
        honorifics,
        emphasizing,
        definition,
        examples,
        translation: translations[0],
      };
    });

  // Fix Korean POS if needed and derive English POS.
  if (koPos === "품사 없음") {
    // Unknown form.
    if (text.endsWith("-")) {
      // Conjugation table for a verb; we don't need it.
      return [];
    }

    if (meanings.some((m) => m.translation?.definition.includes("abbreviated"))) {
      // Abbreviation.
      koPos = "약어";
    } else if (lexicalUnit === "단어") {
      // Updated 2022-12-03.
      const known = { "아무래도": "부사", "이산화 탄소": "명사" };

      koPos = known[text] ?? koPos;
    }
  } else if (koPos === "어미" && !text.startsWith("-")) {
    // Eomi is a suffix, and as of 2022-12-03 the only Eomi without "-" (out of 504 Eomis)
    // is an invalid one that redirects to its "-"-prefixed counterpart.
    return [];
  }

  const { en: pos, alt: posAlt } = koPosToEnPosAndDescription[koPos];

  return { lexicalUnit, koPos, pos, posAlt, text, origin, pronunciation, soundUrl, meanings, relatedForms, semanticCategory, subjectCategory };
})
)}

function _wordCategories(entries)
{
  const words = [];
  const grammar = [];
  const unknown = [];

  for (const entry of entries) {
    if (entry.lexicalUnit === "단어") {
      // Word.
      words.push(entry);
    } else if (entry.lexicalUnit === "구") {
      // Phrase; it is interesting vocabulary so we mark it as a word.
      if (entry.pos !== "None") throw "Invalid 구 entry";
      words.push({
        ...entry,
        koPos: "구",
        pos: "Phrase",
        posDescr: "Phrase",
      });
    } else if (entry.lexicalUnit === "문법‧표현") {
      grammar.push(entry);
    } else {
      unknown.push(entry);
    }
  }

  return { words, grammar, unknown };
}


function _words(wordCategories){return(
wordCategories.words
)}

function _grammar(wordCategories){return(
wordCategories.grammar
)}

function _dict(words,grammar)
{
  const byText = {};

  for (const entry of [...words, ...grammar]) {
    (byText[entry.text] ??= []).push(entry);
  }

  return byText;
}


function _14(download,dict){return(
download(async () => new Blob([JSON.stringify(dict)], { type: "application/json" }), "dict.json", "Save dict.json")
)}

function _15(md){return(
md`### Defining the most common words

- We use the [list of most common words from above](#mostCommonWords)
  and define them using the [dictionary](#dict) obtained above.
- The few missing words are [also listed below](#unknownCommonWords).`
)}

function _mostCommonWordDefinitions(mostCommonWords,dict){return(
mostCommonWords.map(w => [w, dict[w]])
)}

function _unknownCommonWords(mostCommonWordDefinitions){return(
mostCommonWordDefinitions.filter((x) => x[1] == null).map((x) => x[0])
)}

function _18(md){return(
md`## Example sentences

- We need example sentences with their English translation and, ideally,
  a non-TTS sound file for them.
- Here I'll use a [public Korean Anki deck](https://ankiweb.net/shared/decks/korean)
  with example sentences and a sound bank, and more precisely the excellent
  ["Korean Grammar Sentences by Evita"](https://ankiweb.net/shared/info/3614346923).
- Again, this is a big file so it has to be uploaded below.`
)}

function _examplesapkg(Inputs){return(
Inputs.file({ label: "Examples archive", accept: ".apkg", required: true })
)}

function _examplesArchive(examplesapkg){return(
examplesapkg.zip()
)}

async function _examples(examplesArchive,htmlToText)
{
  const mediaJson = await examplesArchive.file("media").json(),
        media = Object.fromEntries(Object.entries(mediaJson).map(([k, v]) => [v, k])),
        db = await examplesArchive.file("collection.anki2").sqlite(),
        rows = await db.sql`SELECT flds FROM notes`;

  return rows.map(({ flds: row }, exampleId) => {
    const fields = row.split("\x1f");
    let koRaw, en, enAlt, soundsRaw, notesRaw;

    if (fields.length === 5) {
      [koRaw, en, enAlt, soundsRaw, notesRaw] = fields;
    } else {
      // TODO: fix this case (with a different Anki deck).
      [koRaw, en, soundsRaw, notesRaw] = fields;
    }

    const soundNames = [...soundsRaw.matchAll(/\[sound:(.+\.mp3)\]/g)].map((m) => m[1]),
          sounds = soundNames.flatMap((name) => media[name] ?? []),
          notes = htmlToText(notesRaw);
    let ko = htmlToText(koRaw.replace(/&nbsp;/g, " "));

    if (ko.includes("<")) {
      ko = ko.replace(/<div>/g, "  ").replace(/<\/div>/g, "");
    }
    if (ko.includes("<")) {
      ko = htmlToText(ko);
    }

    return {
      ko,
      en,
      enAlt,
      notes,
      sounds,
      exampleId,
    };
  });
}


function _22(md){return(
md`## Resolving ambiguities

Now we want to map words in sentences to their tokens statically, so that given
a sentence we not only know the words that make it up, but also their definitions.

First, we merge equal words (same text and POS) together.`
)}

function _wordsByText(words,mostCommonWordsIndex,koPosToEnPosAndDescription)
{
  const wordsByText = {};
  let id = 0;

  for (const word of words) {
    const homographs = (wordsByText[word.text] ??= {
      text: word.text,
      mostCommon: mostCommonWordsIndex.get(word.text),
      words: [],
      get(...pos) {
        for (const desiredPos of pos) {
          const def = this[desiredPos];
          if (def !== undefined) {
            return def;
          }
        }
      },
      get anyAdjective() {
        return this.get("adjective", "auxAdjective");
      },
      get anyAdjectiveOrVerb() {
        return this.get("anyAdjective", "anyVerb");
      },
      get anyInterjection() {
        return this.get("interjection", "noun", "dependentNoun", "pronoun");
      },
      get anyNoun() {
        return this.get("noun", "dependentNoun", "pronoun", "interjection");
      },
      get anyVerb() {
        return this.get("verb", "auxVerb");
      },
      get anyVerbOrAdjective() {
        return this.get("anyVerb", "anyAdjective");
      },
    });

    if (homographs[word.koPos] === undefined) {
      homographs[word.koPos] = word;
      homographs[word.posDescr] = word;
      homographs[koPosToEnPosAndDescription[word.koPos].prop] = word;
      homographs.words.push(word);
      word.wordId = id++;
    } else {
      homographs[word.koPos].meanings.push(...word.meanings);
    }
  }

  return wordsByText;
}


function _wordsById(wordsByText){return(
Object.values(wordsByText).flatMap((word) => word.words)
)}

function _25(download,wordsById){return(
download(async () => new Blob([JSON.stringify(wordsById)], { type: "application/json" }), "words.json", "Download words.json")
)}

function _26(md){return(
md`Then we assign these "unique" words to the examples.`
)}

function _27(md){return(
md`## Tokenizing sentences using [\`kma\`](https://github.com/71/kma)

First we extract sentences to a .txt file.`
)}

function _sentencesToTokenize(examples,wordsById)
{
  // Use an object to keep ordering of insertions and to dedup sentences.
  const all = {};
  const add = (sentence) => all[sentence] = void 0;

  for (const example of examples) {
    add(example.ko);
  }
  for (const word of wordsById) {
    for (const meaning of word.meanings) {
      if (meaning.definition != null) {
        add(meaning.definition);
      }
    }
  }
  // Note: we don't tokenize `words.meanings.examples.texts`, since there're >500k of them.
  return Object.keys(all);
}


function _29(download,sentencesToTokenize){return(
download(async () => new Blob([sentencesToTokenize.join("\n")]), "sentences.txt", "Save sentences.txt")
)}

function _30(md){return(
md`Then we import the raw tokenized sentences and transform them for use with our dataset.
See [here](https://lucene.apache.org/core/8_0_0/analyzers-nori/org/apache/lucene/analysis/ko/POS.Tag.html)
for a classification of the possible POS.

Note that kma sometimes fails to tokenize long sentences (found in definitions of words),
so these will be not be assigned tokens.`
)}

function _kmaoutput(Inputs){return(
Inputs.file({ label: "Output of kma", accept: ".json", required: true })
)}

function _rawKmaSentences(kmaoutput){return(
kmaoutput.json()
)}

function _tokenSamples(rawKmaSentences)
{
  const samples = {};

  for (const sentence of rawKmaSentences) {
    for (const [text, stem, tokenType] of sentence) {
      const texts = (samples[tokenType] ??= { STEMS: {} });

      if (text in texts) texts[text]++;
      else texts[text] = 1;
      if (stem in texts.STEMS) texts.STEMS[stem]++;
      else texts.STEMS[stem] = 1;
    }
  }

  // Sort tokens by name, maps by usage.
  const sortByUsage = (obj) => Object.fromEntries(Object.entries(obj).sort(([,a], [,b]) => b - a));

  return Object.fromEntries(
    Object.entries(samples)
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([k, v]) => [k, { STEMS: sortByUsage(v.STEMS), ...sortByUsage(v) }]),
  );
}


function _34(kmaSentences){return(
kmaSentences.filter((s) => s.tokens.some((t) => typeof t === "string" && /\p{Script=Hangul}/u.test(t)))
)}

function _kmaSentences(rawKmaSentences,wordsByText){return(
rawKmaSentences.map((rawTokens, i) => {
  const sentence = rawTokens.map((t) => t[0]).join(""),
        tokens = [];

  if (rawTokens.length === 0) return { sentence };

  for (let i = 0; i < rawTokens.length; i++) {
    const [text, rawVocab, pos] = rawTokens[i];
    let vocab = null;

    // Perform basic assignment from POSs to vocabulary.
    switch (pos) {
      case "NNB":
        vocab = wordsByText[rawVocab]?.anyNoun ?? wordsByText["-" + rawVocab]?.modifier;
        break;
      case "NNG":
        vocab = wordsByText[rawVocab]?.get("anyNoun", "adverb") ?? wordsByText["대명사"].noun;
        break;
      case "NP":
        vocab = wordsByText[rawVocab]?.anyNoun;
        break;
      case "NNP":  // Pronoun
        vocab = wordsByText[rawVocab]?.anyNoun ?? wordsByText["대명사"].noun;
        break;
      case "IC":  // Interjection
        vocab = wordsByText[rawVocab]?.get("interjection", "anyNoun");
        break;

      case "XSV":
      case "VV":
      case "VX":
        vocab = wordsByText[`${rawVocab}다`]?.anyVerbOrAdjective;
        break;
      case "VA":
      case "VCN":
        vocab = wordsByText[`${rawVocab}다`]?.anyAdjectiveOrVerb;
        break;
      case "VCP":
        vocab = wordsByText["이다"].josa;
        break;
      case "XR":
        vocab = wordsByText[`${rawVocab}하다`]?.anyVerbOrAdjective;
        break;

      case "MM":
        vocab = wordsByText[rawVocab]?.determiner;
        if (vocab === undefined && rawVocab === "지난") {
          // No entry in the dictionary, but this word is quite common.
          vocab = wordsByText["지나다"].verb;
        }
        break;

      case "MAG":
        vocab = wordsByText[rawVocab]?.get("adverb", "anyNoun");
        break;
      case "MAJ":
        vocab = wordsByText[rawVocab]?.adverb;
        break;
        
      case "ETM":
      case "JKO":
      case "JKB":
      case "JKC":
      case "JKG":
      case "JKS":
      case "JKQ":
      case "JX":
      case "JC":
        vocab = wordsByText["-" + rawVocab]?.get("josa", "eomi") ?? wordsByText[rawVocab]?.get("josa", "eomi");
        break;

      case "XSA":  // 하, 되, 같, ...
        if (tokens.length > 0 && typeof tokens.at(-1) === "string") {
          const combinedText = `${tokens.at(-1)}${rawVocab}다`;
          const combinedVocab = wordsByText[combinedText]?.anyVerbOrAdjective;

          if (combinedVocab !== undefined) {
            tokens[tokens.length - 1] = [tokens.at(-1) + text, combinedVocab];
            continue;
          }
        } else if (tokens.length > 0) {
          const combinedText = `${tokens.at(-1)[0]}${rawVocab}다`;
          const combinedVocab = wordsByText[combinedText]?.anyVerbOrAdjective;

          if (combinedVocab !== undefined) {
            tokens.at(-1)[0] += text;
            tokens.at(-1)[1] = combinedVocab;
            continue;
          }
        }
        vocab = wordsByText[`${rawVocab}다`]?.anyVerbOrAdjective;
        break;

      case "EP":
      case "EF":
      case "EC":
      case "ET":
      case "ETN":
      case "XSN": // Ending.
        const ending = wordsByText[`-${text}`]?.josa;

        if (ending !== undefined) {
          vocab = ending;
        } else {
          if (typeof tokens.at(-1) === "string")
            tokens[tokens.length - 1] += text;
          else
            tokens.at(-1)[0] += text;
          continue;
        }
        break;

      case "NR":
        vocab = wordsByText[text]?.number;

        if (vocab === undefined) {
          // Split into multiple tokens.
          const vocabs = [...text].map((n) => [n, wordsByText[n]?.number]);

          if (vocabs.every((v) => v[1] !== undefined)) {
            tokens.push(...vocabs);
            continue;
          }
        }
        break;

      default:
        // TODO: handle remaining tokens
        break;
    }

    vocab ??= wordsByText[rawVocab]?.abbreviation ?? wordsByText[rawVocab + "다"]?.abbreviation;

    if (vocab === null && typeof tokens.at(-1) === "string") {
      tokens[tokens.length - 1] += text;
      continue;
    }

    if (vocab?.text === "하다" && tokens.at(-1)?.[1]?.pos === "Noun") {
      // Transform Noun+하다 into verb if possible.
      const verb = wordsByText[`${tokens.at(-1)[1].text}하다`]?.anyAdjectiveOrVerb;

      if (verb !== undefined) {
        tokens[tokens.length - 1] = [tokens.at(-1)[0] + text, verb];
        continue;
      }
    }

    // Merge consecutive tokens, e.g. 재미 + 없다 -> 재미없다
    let next = vocab ? [text, vocab] : text;

    if (tokens.length > 0) {
      let prev = tokens.at(-1);
      const prevText = typeof prev === "string" ? prev : prev[1].text;
      const nextText = typeof next === "string" ? next : next[1].text;

      // TODO: we could use the rawVocab of the previous token to get a better chance at finding new vocab
      const combinedText = prevText + nextText;
      const combinedDef = prevText.length === 0 || nextText.length === 0 ? undefined : wordsByText[combinedText];

      if (combinedDef !== undefined) {
        if (typeof prev === "string") tokens[tokens.length - 1] = prev = [prev];
        if (typeof next === "string") next = [text];

        for (const word of combinedDef.words) {
          prev.push(word);
          next.push(word);
        }
      }
    }

    tokens.push(next);
  }

  if (tokens.at(-1) === "") {
    tokens.pop();
  }

  return { sentence, tokens, rawTokens };
})
)}

function _kmaSentencesMap(kmaSentences){return(
new Map(
  kmaSentences.map((sentence) => [sentence.sentence, sentence])
)
)}

function _kmaExamples(examples,kmaSentences){return(
examples.map((example, i) => ({ ...example, ...kmaSentences[i] }))
)}

function _38(kmaExamples){return(
kmaExamples.filter(x => x.ko.includes("어떤"))
)}

function _39(md){return(
md`## Mapping words to sentences

This is the last step. We have the words we want to learn in a specific order, but we
want to learn them through example sentences. Thus, we map all our words to the example
sentences that contain them.`
)}

function _interestingPos(){return(
new Set([
  "Adjective",
  "Verb",
  "Noun",
  "Determiner",
  "Adverb",
])
)}

function _wordsToExamples(mostCommonWordDefinitions,kmaExamples,$0,wordsByText)
{
  const words = Object.fromEntries(
    mostCommonWordDefinitions.map(([w]) => [w, new Set]),
  );

  for (let i = 0; i < kmaExamples.length; i++) {
    const example = kmaExamples[i];

    for (const token of example.tokens) {
      if (typeof token === "string") continue;

      if (token[1].text in words) {
        words[token[1].text].add(i);
      }
    }
  }

  $0.value = [];

  return new Map(
    Object.entries(words).flatMap(([wordText, sentenceIndices]) => {
      const word = wordsByText[wordText]?.get("anyNoun", "anyVerb", "anyAdjective", "adverb", "determiner");
  
      if (word === undefined) {
        $0.value = [...$0.value, wordText];
        return [];
      }
  
      return [[word.wordId, [...sentenceIndices].sort((a, b) => a - b)]];
    }),
  );
}


function _unknownMostCommonWords(){return(
[]
)}

function _43(download,wordsToExamples){return(
download(async () => new Blob([JSON.stringify(wordsToExamples)], { type: "application/json" }), "words_to_examples.json", "Save words_to_examples.json")
)}

function _44(download,jszip,kmaExamples,examplesArchive){return(
download(async () => {
  const zip = new jszip();

  for (const { sounds } of kmaExamples) {
    for (const sound of sounds) {
      zip.file(`${sound}.mp3`, await examplesArchive.file(`${sound}`).arrayBuffer());
    }
  }

  return await zip.generateAsync({ type: "blob" });
}, "sounds.zip", "Save sounds.zip")
)}

function _45(download,kmaExamples){return(
download(async () => new Blob([JSON.stringify(kmaExamples.map((x) => ({ ...x, tokens: x.tokens.map((t) => Array.isArray(t) ? [t[0], t[1].wordId] : t)})))], { type: "application/json" }), "full_kma_examples.json", "Save full_kma_examples.json")
)}

function _46(md){return(
md`### Mapping words to definitions

We also do that with definitions to map words to the definitions that use them.`
)}

function _wordsToDefinitions(wordsById,kmaSentencesMap)
{
  const results = Array.from({ length: wordsById.length }, () => []);

  for (const word of wordsById) {
    for (const meaning of word.meanings) {
      const tokens = kmaSentencesMap.get(meaning.definition)?.tokens;

      if (tokens === undefined) {
        continue;
      }

      for (const token of tokens) {
        if (!Array.isArray(token)) {
          continue;
        }
        const array = results[token[1].wordId];

        if (!array.includes(word)) {
          array.push(word);
        }
      }
    }
  }

  return results;
}


function _48(md){return(
md`## Exporting all data to Protobuf

See [appendix](#pb) for the output schema.`
)}

function _toProtobuf(pb,wordsByText,kmaSentencesMap,examples,posPropertyNames,wordsToExamples,wordsToDefinitions,koPosToEnPosAndDescription,mostCommonWordsIndex){return(
function toProtobuf() {
  function wordRefOf(text) {
    return pb.Word.Meaning.WordRef.create({
      text,
      wordIds: wordsByText[text],
    });
  }

  function meaningOf(meaning) {
    return pb.Word.Meaning.create({
      definition: sentenceDataOf(meaning.definition),
      translation: meaning.translation?.text,
      definitionTranslation: meaning.translation?.definition,
      related: meaning.related.map(wordRefOf),
      originalForms: meaning.originalForms.map(wordRefOf),
      synonyms: meaning.synonyms.map(wordRefOf),
      antonyms: meaning.antonyms.map(wordRefOf),
      honorifics: meaning.honorifics.map(wordRefOf),
      abbreviations: meaning.abbreviations,
    });
  }

  function relatedFormOf({ type, text }) {
    text = text.replace(/ *\d+$/, "");

    let word;

    switch (type) {
      case "파생어":
        type = "verbForm";
        word =  wordsByText[text]?.anyAdjOrVerb;
        break;
      case "☞(가 보라)":
        // I can't find a translation of 가봐라 that fits, so I named it
        // "noun_form", though it doesn't seem accurate. Heh.
        type = "nounForm";
        word = wordsByText[text]?.get("anyNoun", "anyAdjOrVerb");
        break;
      default:
        throw new Error(`invalid related form type "${type}"`)
    }

    if (word === undefined) {
      return pb.Word.RelatedForm.create({ text });
    }

    return pb.Word.RelatedForm.create({
      text,
      [type]: word.wordId,
    });
  }

  function sentenceDataOf(text) {
    const { tokens } = kmaSentencesMap.get(text) ?? {};

    if (tokens === undefined) {
      return pb.TokenizedText.create({ text });
    }

    return pb.TokenizedText.create({
      text,
      tokens: tokens.map((token) =>
        typeof token === "string"
          ? pb.TokenizedText.Token.create({ text: token })
          : pb.TokenizedText.Token.create({ text: token[0], wordId: token.at(-1).wordId })),
    });
  }

  const inputExamples = examples;

  return pb.AllData.create({
    words: Object.values(wordsByText).map((word) => {
      const definitions = posPropertyNames.map((prop) => {
        const def = word[prop];

        if (def === undefined) {
          return;
        }

        const exampleIds = wordsToExamples.get(def.wordId) ?? [];
        const appearsInDefinitionOf = wordsToDefinitions[def.wordId].map((w) => w.wordId);

        return [prop, pb.Word.Defined.create({
          wordId: def.wordId,
          text: word.text,
          pos: koPosToEnPosAndDescription[def.koPos].prop,
          lexicalUnit: def.lexicalUnit,
          origin: def.origin,
          pronunciation: def.pronunciation,
          soundUrl: def.soundUrl,
          meanings: def.meanings.map(meaningOf),
          relatedForms: def.relatedForms.map(relatedFormOf),
          exampleIds,
          appearsInDefinitionOf,
        })];
      }).filter((kv) => kv !== undefined);

      const mostCommon = word.mostCommon;
      const mostCommonScore = mostCommon === undefined ? 0 : mostCommonWordsIndex.size - mostCommon;
      const appearsIn = definitions.reduce((acc, [,d]) => acc + (d.exampleIds?.length ?? 0) + (d.appearsInDefinitionOf?.length ?? 0), 0);

      return pb.Word.create({
        text: word.text,

        score: mostCommonScore * 100 + appearsIn,
        mostCommon,

        ...Object.fromEntries(definitions),
      });
    }),
    examples: inputExamples.map((example) => {
      return pb.Example.create({
        exampleId: example.exampleId,
        koSentence: sentenceDataOf(example.ko),
        enTranslation: example.en,
        enTranslationAlt: example.enAlt === "" ? undefined : example.enAlt,
        notes: example.notes,
        soundId: example.sounds.length === 0 ? undefined : parseInt(example.sounds[0]),
      });
    }),
    pos: Object.entries(koPosToEnPosAndDescription).filter(([ko]) => ko !== "품사 없음").map(([ko, { en, alt: enAlt, prop }]) => {
      return pb.AllData.PartOfSpeech.create({
        id: prop.replace(/[A-Z]/g, (s) => "_" + s.toLowerCase()),
        ko,
        en,
        enAlt,
        wordId: wordsByText[ko].get("noun", "phrase").wordId,
      });
    }),
  });
}
)}

function _protobuf(toProtobuf){return(
toProtobuf()
)}

function _51(download,pb,toProtobuf){return(
download(async () => new Blob([pb.AllData.encode(toProtobuf()).finish()]), "kodata.rawproto", "Save kodata.rawproto")
)}

function _52(protobuf){return(
protobuf.words.find(x => x.text === "안녕")
)}

function _53(md){return(
md`## Bonus: "deep-dive" into a word

Write down a word you want to learn below, and its definition in Korean will be given.
For each word in the definition, you can also see its definition, over and over again
until you understand everything.`
)}

function _deepdiveword(Inputs){return(
Inputs.text({ label: "Deep-dive into...", value: "말" })
)}

function _55(dict,kmaSentencesMap,deepdiveword)
{
  const
    cache = new Map(),
    unknown = { toString() { return "<unknown>"; } };

  function traverse(word) {
    if (cache.has(word)) {
      return cache.get(word);
    }

    const data = dict[word];

    if (data === undefined) {
      return unknown;
    }

    const result = { word, definitions: [] };

    cache.set(word, result);

    for (const wordData of data) {
      for (const meaning of wordData.meanings) {
        const
          definition = meaning.definition,
          definitionTranslation = meaning.translation.definition,
          translation = meaning.translation.text;

        result.definitions.push({
          pos: wordData.posDescr,
          definition,
          definitionTranslation,
          translation,

          get definitionWords() {
            return kmaSentencesMap.get(definition).tokens.flatMap((token) => {
              if (typeof token === "string") {
                return [];
              }

              const r = traverse(typeof token === "string" ? token : token[1].text);
  
              return r === unknown ? [] : r;
            });
          },
        });
      }
    }

    return result;
  }

  return traverse(deepdiveword);
}


function _56(md){return(
md`## Appendix`
)}

function _pb(protoc){return(
protoc`
syntax = "proto3";

option java_package = "gregoiregeis.studykorean.proto";
option java_multiple_files = true;

message TokenizedText {
  message Token {
    string text = 1;
    optional int32 word_id = 2;
  }

  string text = 1;
  repeated Token tokens = 2;
}

// An entry identified by the text of the word or expression.
message Word {
  message Meaning {
    // We don't encode examples right now because there's too many
    // of them, we don't have accurate translations of them, and
    // their quantity makes it prohibitive to tokenize them all.
    //
    // message Example {
    //   message Conversation {
    //     repeated string sentences = 1;
    //   }
    //
    //   oneof type {
    //     string phrase = 1;              // 구
    //     string sentence = 2;            // 문장
    //     Conversation conversation = 3;  // 대화
    //   }
    // }

    message WordRef {
      string text = 1;
      repeated int32 word_ids = 2;
    }

    TokenizedText definition = 1;
    string translation = 2;
    string definition_translation = 3;

    // See comment above.
    // repeated Example examples = 4;

    repeated WordRef related = 5;
    repeated WordRef original_forms = 6;
    repeated WordRef synonyms = 7;
    repeated WordRef antonyms = 8;
    repeated WordRef honorifics = 9;
    repeated string abbreviations = 10;
  }

  message RelatedForm {
    string text = 1;

    oneof id {
      int32 verb_form = 2;  // 파생어; noun -> verb
      int32 noun_form = 3;  // 가봐라; verb -> noun
    }
  }

  message Defined {
    int32 word_id = 1;
    string text = 2;
    string pos = 3; // As in PartOfSpeech.id
    string lexical_unit = 6;
    string origin = 7;
    string pronunciation = 8;
    string sound_url = 9;

    repeated Meaning meanings = 10;
    repeated RelatedForm related_forms = 11;

    repeated int32 example_ids = 12;
    repeated int32 appears_in_definition_of = 13;
  }

  string text = 1;

  optional Defined noun = 2; // 명사
  optional Defined dependent_noun = 3; // 의존 명사
  optional Defined pronoun = 4; // 대명사
  optional Defined interjection = 5; // 감탄사
  optional Defined verb = 6; // 동사
  optional Defined aux_verb = 7; // 보조 동사
  optional Defined aux_adjective = 8; // 보조 형용사
  optional Defined eomi = 9; // 어미, verb suffix
  optional Defined adjective = 10; // 형용사
  optional Defined adverb = 11; // 부사
  optional Defined josa = 12; // 조사, particle
  optional Defined determiner = 13; // 관형사
  optional Defined modifier = 14; // 접사
  optional Defined number = 15; // 수사
  optional Defined abbreviation = 16; // 약어
  optional Defined phrase = 17; // 구

  int32 score = 20;
  optional int32 most_common = 21;
}

message Example {
  int32 example_id = 1;
  TokenizedText ko_sentence = 2;
  string en_translation = 3;
  string en_translation_alt = 4;
  string notes = 5;

  optional int32 sound_id = 6;
}

message AllData {
  message PartOfSpeech {
    string id = 1;  // English identifier as used in Word
    string ko = 2;
    string en = 3;
    string en_alt = 4;
    int32 word_id = 5;
  }

  repeated Word words = 1;
  repeated Example examples = 2;
  repeated PartOfSpeech pos = 3;
}
`
)}

function _htmlToText(DOMParser){return(
(html) => new DOMParser().parseFromString(`<div>${html}</div>`, "text/html").firstChild.textContent
)}

function _koPosToEnPosAndDescription()
{
  // Note: more work is needed on this map / related to this map. I can find
  // POSs that match precisely some of the terms below, but in practice OKT
  // doesn't differentiate between them, even when using specific examples.
  const map = {
    "명사": "Noun",
    "의존 명사": { en: "Dependent noun", prop: "dependentNoun" },
    "대명사": "Pronoun",
    "감탄사": "Interjection",
    "동사": "Verb",
    "보조 동사": { en: "Auxiliary verb", prop: "auxVerb" },
    "보조 형용사": { en: "Auxiliary adjective", prop: "auxAdjective" },
    "어미": { en: "Eomi", alt: "Verb suffix" },
    "형용사": "Adjective",
    "부사": "Adverb",
    "조사": { en: "Josa", alt: "Particle" },
    "관형사": "Determiner",
    "접사": "Modifier",
    "수사": "Number",

    // Custom forms derived manually above:
    "약어": "Abbreviation",
    "구": "Phrase",
  };
  const propOf = (t) => t[0].toLowerCase() + t.slice(1).replace(/ \w/g, (s) => s[1].toUpperCase());

  for (const prop in map) {
    if (typeof map[prop] === "string") map[prop] = { en: map[prop], prop: propOf(map[prop]) };
    else map[prop].prop ??= propOf(map[prop].en);
  }

  map["품사 없음"] = { en: "None", prop: "none" };

  return map;
}


function _posPropertyNames(koPosToEnPosAndDescription){return(
Object.values(koPosToEnPosAndDescription).map(x => x.prop)
)}

export default function define(runtime, observer) {
  const main = runtime.module();
  main.variable(observer()).define(["md"], _1);
  main.variable(observer("mostCommonWords")).define("mostCommonWords", _mostCommonWords);
  main.variable(observer("mostCommonWordsIndex")).define("mostCommonWordsIndex", ["mostCommonWords"], _mostCommonWordsIndex);
  main.variable(observer()).define(["md"], _4);
  main.variable(observer("viewof rawzipdict")).define("viewof rawzipdict", ["Inputs"], _rawzipdict);
  main.variable(observer("rawzipdict")).define("rawzipdict", ["Generators", "viewof rawzipdict"], (G, _) => G.input(_));
  main.variable(observer()).define(["md"], _6);
  main.variable(observer("jsonDicts")).define("jsonDicts", ["rawzipdict"], _jsonDicts);
  main.variable(observer("jsonEntries")).define("jsonEntries", ["jsonDicts"], _jsonEntries);
  main.variable(observer("entries")).define("entries", ["jsonEntries","koPosToEnPosAndDescription"], _entries);
  main.variable(observer("wordCategories")).define("wordCategories", ["entries"], _wordCategories);
  main.variable(observer("words")).define("words", ["wordCategories"], _words);
  main.variable(observer("grammar")).define("grammar", ["wordCategories"], _grammar);
  main.variable(observer("dict")).define("dict", ["words","grammar"], _dict);
  main.variable(observer()).define(["download","dict"], _14);
  main.variable(observer()).define(["md"], _15);
  main.variable(observer("mostCommonWordDefinitions")).define("mostCommonWordDefinitions", ["mostCommonWords","dict"], _mostCommonWordDefinitions);
  main.variable(observer("unknownCommonWords")).define("unknownCommonWords", ["mostCommonWordDefinitions"], _unknownCommonWords);
  main.variable(observer()).define(["md"], _18);
  main.variable(observer("viewof examplesapkg")).define("viewof examplesapkg", ["Inputs"], _examplesapkg);
  main.variable(observer("examplesapkg")).define("examplesapkg", ["Generators", "viewof examplesapkg"], (G, _) => G.input(_));
  main.variable(observer("examplesArchive")).define("examplesArchive", ["examplesapkg"], _examplesArchive);
  main.variable(observer("examples")).define("examples", ["examplesArchive","htmlToText"], _examples);
  main.variable(observer()).define(["md"], _22);
  main.variable(observer("wordsByText")).define("wordsByText", ["words","mostCommonWordsIndex","koPosToEnPosAndDescription"], _wordsByText);
  main.variable(observer("wordsById")).define("wordsById", ["wordsByText"], _wordsById);
  main.variable(observer()).define(["download","wordsById"], _25);
  main.variable(observer()).define(["md"], _26);
  main.variable(observer()).define(["md"], _27);
  main.variable(observer("sentencesToTokenize")).define("sentencesToTokenize", ["examples","wordsById"], _sentencesToTokenize);
  main.variable(observer()).define(["download","sentencesToTokenize"], _29);
  main.variable(observer()).define(["md"], _30);
  main.variable(observer("viewof kmaoutput")).define("viewof kmaoutput", ["Inputs"], _kmaoutput);
  main.variable(observer("kmaoutput")).define("kmaoutput", ["Generators", "viewof kmaoutput"], (G, _) => G.input(_));
  main.variable(observer("rawKmaSentences")).define("rawKmaSentences", ["kmaoutput"], _rawKmaSentences);
  main.variable(observer("tokenSamples")).define("tokenSamples", ["rawKmaSentences"], _tokenSamples);
  main.variable(observer()).define(["kmaSentences"], _34);
  main.variable(observer("kmaSentences")).define("kmaSentences", ["rawKmaSentences","wordsByText"], _kmaSentences);
  main.variable(observer("kmaSentencesMap")).define("kmaSentencesMap", ["kmaSentences"], _kmaSentencesMap);
  main.variable(observer("kmaExamples")).define("kmaExamples", ["examples","kmaSentences"], _kmaExamples);
  main.variable(observer()).define(["kmaExamples"], _38);
  main.variable(observer()).define(["md"], _39);
  main.variable(observer("interestingPos")).define("interestingPos", _interestingPos);
  main.variable(observer("wordsToExamples")).define("wordsToExamples", ["mostCommonWordDefinitions","kmaExamples","mutable unknownMostCommonWords","wordsByText"], _wordsToExamples);
  main.define("initial unknownMostCommonWords", _unknownMostCommonWords);
  main.variable(observer("mutable unknownMostCommonWords")).define("mutable unknownMostCommonWords", ["Mutable", "initial unknownMostCommonWords"], (M, _) => new M(_));
  main.variable(observer("unknownMostCommonWords")).define("unknownMostCommonWords", ["mutable unknownMostCommonWords"], _ => _.generator);
  main.variable(observer()).define(["download","wordsToExamples"], _43);
  main.variable(observer()).define(["download","jszip","kmaExamples","examplesArchive"], _44);
  main.variable(observer()).define(["download","kmaExamples"], _45);
  main.variable(observer()).define(["md"], _46);
  main.variable(observer("wordsToDefinitions")).define("wordsToDefinitions", ["wordsById","kmaSentencesMap"], _wordsToDefinitions);
  main.variable(observer()).define(["md"], _48);
  main.variable(observer("toProtobuf")).define("toProtobuf", ["pb","wordsByText","kmaSentencesMap","examples","posPropertyNames","wordsToExamples","wordsToDefinitions","koPosToEnPosAndDescription","mostCommonWordsIndex"], _toProtobuf);
  main.variable(observer("protobuf")).define("protobuf", ["toProtobuf"], _protobuf);
  main.variable(observer()).define(["download","pb","toProtobuf"], _51);
  main.variable(observer()).define(["protobuf"], _52);
  main.variable(observer()).define(["md"], _53);
  main.variable(observer("viewof deepdiveword")).define("viewof deepdiveword", ["Inputs"], _deepdiveword);
  main.variable(observer("deepdiveword")).define("deepdiveword", ["Generators", "viewof deepdiveword"], (G, _) => G.input(_));
  main.variable(observer()).define(["dict","kmaSentencesMap","deepdiveword"], _55);
  main.variable(observer()).define(["md"], _56);
  main.variable(observer("pb")).define("pb", ["protoc"], _pb);
  main.variable(observer("htmlToText")).define("htmlToText", ["DOMParser"], _htmlToText);
  main.variable(observer("koPosToEnPosAndDescription")).define("koPosToEnPosAndDescription", _koPosToEnPosAndDescription);
  main.variable(observer("posPropertyNames")).define("posPropertyNames", ["koPosToEnPosAndDescription"], _posPropertyNames);
  const child1 = runtime.module(define1);
  main.import("protoc", child1);
  const child2 = runtime.module(define2);
  main.import("download", child2);
  const child3 = runtime.module(define3);
  main.import("jszip", child3);
  return main;
}
